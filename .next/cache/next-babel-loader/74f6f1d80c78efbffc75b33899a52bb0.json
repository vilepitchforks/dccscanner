{"ast":null,"code":"import { createStore, action, computed, thunk } from \"easy-peasy\";\nimport { setScanUrl, setScanCtgs, setMetadata, reSetScanUrl, setScanCompleted, setProcessInProgress, addInfoEvent, addErrorEvent, addDataEvent, startStream } from \"../eventHandlers/eventHandlers.js\";\nvar Store = createStore({\n  scanUrl: \"\",\n  scanCtgs: \"\",\n  metadata: {},\n  infoEvents: [],\n  dataEvents: {},\n  errorEvents: [],\n  scanCompleted: false,\n  processInProgress: false,\n  setScanUrl: action(function (state, scanUrl) {\n    return setScanUrl(state, scanUrl);\n  }),\n  setScanCtgs: action(function (state, scanCtgs) {\n    return setScanCtgs(state, scanCtgs);\n  }),\n  setMetadata: action(function (state, meta) {\n    return setMetadata(state, meta);\n  }),\n  reSetScanUrl: action(function (state) {\n    return reSetScanUrl(state);\n  }),\n  setScanCompleted: action(function (state, check) {\n    setScanCompleted(state, check);\n  }),\n  // Check switch for the entire process from starting scan to the storing of data in db:\n  setProcessInProgress: action(function (state, check) {\n    setProcessInProgress(state, check);\n  }),\n  addInfoEvent: action(function (state, event) {\n    addInfoEvent(state, event);\n  }),\n  addDataEvent: action(function (state, payload) {\n    addDataEvent(state, payload);\n  }),\n  addErrorEvent: action(function (state, event) {\n    addErrorEvent(state, event);\n  }),\n  startStream: thunk(function (actions, query) {\n    return startStream(actions, query);\n  })\n});\nexport default Store;","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/lib/state/store/Store.js"],"names":["createStore","action","computed","thunk","setScanUrl","setScanCtgs","setMetadata","reSetScanUrl","setScanCompleted","setProcessInProgress","addInfoEvent","addErrorEvent","addDataEvent","startStream","Store","scanUrl","scanCtgs","metadata","infoEvents","dataEvents","errorEvents","scanCompleted","processInProgress","state","meta","check","event","payload","actions","query"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,QAA9B,EAAwCC,KAAxC,QAAqD,YAArD;AAEA,SACEC,UADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,gBALF,EAMEC,oBANF,EAOEC,YAPF,EAQEC,aARF,EASEC,YATF,EAUEC,WAVF,QAWO,mCAXP;AAaA,IAAMC,KAAK,GAAGd,WAAW,CAAC;AACxBe,EAAAA,OAAO,EAAE,EADe;AAExBC,EAAAA,QAAQ,EAAE,EAFc;AAGxBC,EAAAA,QAAQ,EAAE,EAHc;AAIxBC,EAAAA,UAAU,EAAE,EAJY;AAKxBC,EAAAA,UAAU,EAAE,EALY;AAMxBC,EAAAA,WAAW,EAAE,EANW;AAOxBC,EAAAA,aAAa,EAAE,KAPS;AAQxBC,EAAAA,iBAAiB,EAAE,KARK;AASxBlB,EAAAA,UAAU,EAAEH,MAAM,CAAC,UAACsB,KAAD,EAAQR,OAAR;AAAA,WAAoBX,UAAU,CAACmB,KAAD,EAAQR,OAAR,CAA9B;AAAA,GAAD,CATM;AAUxBV,EAAAA,WAAW,EAAEJ,MAAM,CAAC,UAACsB,KAAD,EAAQP,QAAR;AAAA,WAAqBX,WAAW,CAACkB,KAAD,EAAQP,QAAR,CAAhC;AAAA,GAAD,CAVK;AAWxBV,EAAAA,WAAW,EAAEL,MAAM,CAAC,UAACsB,KAAD,EAAQC,IAAR;AAAA,WAAiBlB,WAAW,CAACiB,KAAD,EAAQC,IAAR,CAA5B;AAAA,GAAD,CAXK;AAYxBjB,EAAAA,YAAY,EAAEN,MAAM,CAAC,UAAAsB,KAAK;AAAA,WAAIhB,YAAY,CAACgB,KAAD,CAAhB;AAAA,GAAN,CAZI;AAaxBf,EAAAA,gBAAgB,EAAEP,MAAM,CAAC,UAACsB,KAAD,EAAQE,KAAR,EAAkB;AACzCjB,IAAAA,gBAAgB,CAACe,KAAD,EAAQE,KAAR,CAAhB;AACD,GAFuB,CAbA;AAgBxB;AACAhB,EAAAA,oBAAoB,EAAER,MAAM,CAAC,UAACsB,KAAD,EAAQE,KAAR,EAAkB;AAC7ChB,IAAAA,oBAAoB,CAACc,KAAD,EAAQE,KAAR,CAApB;AACD,GAF2B,CAjBJ;AAoBxBf,EAAAA,YAAY,EAAET,MAAM,CAAC,UAACsB,KAAD,EAAQG,KAAR,EAAkB;AACrChB,IAAAA,YAAY,CAACa,KAAD,EAAQG,KAAR,CAAZ;AACD,GAFmB,CApBI;AAuBxBd,EAAAA,YAAY,EAAEX,MAAM,CAAC,UAACsB,KAAD,EAAQI,OAAR,EAAoB;AACvCf,IAAAA,YAAY,CAACW,KAAD,EAAQI,OAAR,CAAZ;AACD,GAFmB,CAvBI;AA0BxBhB,EAAAA,aAAa,EAAEV,MAAM,CAAC,UAACsB,KAAD,EAAQG,KAAR,EAAkB;AACtCf,IAAAA,aAAa,CAACY,KAAD,EAAQG,KAAR,CAAb;AACD,GAFoB,CA1BG;AA6BxBb,EAAAA,WAAW,EAAEV,KAAK,CAAC,UAACyB,OAAD,EAAUC,KAAV;AAAA,WAAoBhB,WAAW,CAACe,OAAD,EAAUC,KAAV,CAA/B;AAAA,GAAD;AA7BM,CAAD,CAAzB;AAgCA,eAAef,KAAf","sourcesContent":["import { createStore, action, computed, thunk } from \"easy-peasy\";\n\nimport {\n  setScanUrl,\n  setScanCtgs,\n  setMetadata,\n  reSetScanUrl,\n  setScanCompleted,\n  setProcessInProgress,\n  addInfoEvent,\n  addErrorEvent,\n  addDataEvent,\n  startStream\n} from \"../eventHandlers/eventHandlers.js\";\n\nconst Store = createStore({\n  scanUrl: \"\",\n  scanCtgs: \"\",\n  metadata: {},\n  infoEvents: [],\n  dataEvents: {},\n  errorEvents: [],\n  scanCompleted: false,\n  processInProgress: false,\n  setScanUrl: action((state, scanUrl) => setScanUrl(state, scanUrl)),\n  setScanCtgs: action((state, scanCtgs) => setScanCtgs(state, scanCtgs)),\n  setMetadata: action((state, meta) => setMetadata(state, meta)),\n  reSetScanUrl: action(state => reSetScanUrl(state)),\n  setScanCompleted: action((state, check) => {\n    setScanCompleted(state, check);\n  }),\n  // Check switch for the entire process from starting scan to the storing of data in db:\n  setProcessInProgress: action((state, check) => {\n    setProcessInProgress(state, check);\n  }),\n  addInfoEvent: action((state, event) => {\n    addInfoEvent(state, event);\n  }),\n  addDataEvent: action((state, payload) => {\n    addDataEvent(state, payload);\n  }),\n  addErrorEvent: action((state, event) => {\n    addErrorEvent(state, event);\n  }),\n  startStream: thunk((actions, query) => startStream(actions, query))\n});\n\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}