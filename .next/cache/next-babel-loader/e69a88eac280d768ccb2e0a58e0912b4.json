{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Model } from \"../../helpers/processDb.js\";\nexport const setScanUrl = (state, scanUrl) => {\n  state.scanUrl = scanUrl;\n};\nexport const setScanCtgs = (state, scanCtgs) => {\n  state.scanCtgs = scanCtgs;\n};\nexport const setScanInProgress = (state, check) => {\n  state.scanInProgress = check;\n};\nexport const setMetadata = (state, meta) => {\n  state.metadata = meta;\n};\nexport const reSetScanUrl = state => {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = [];\n  state.errorEvents = [];\n};\nexport const addInfoEvent = (state, event) => {\n  state.infoEvents.push(event);\n};\nexport const addDataEvent = (state, {\n  url,\n  data,\n  timestamp\n}) => {\n  // Store valid DCC objects, with more than just url, scannedUrl and timestamp.\n  if (Object.keys(data).length > 3) state.dataEvents.push(_objectSpread({\n    url,\n    timestamp\n  }, data));\n};\nexport const addErrorEvent = (state, event) => {\n  state.errorEvents.push(event);\n};\nexport const startStream = async (actions, query) => {\n  const es = new EventSource(\"/api/stream?\" + query, {\n    withCredentials: true\n  });\n  const timestamp = new Date().getTime();\n\n  es.onopen = () => {\n    actions.addInfoEvent(\"Connection with server established.\");\n    actions.setScanInProgress(true);\n  };\n\n  es.addEventListener(\"info\", ({\n    data\n  }) => {\n    actions.addInfoEvent(JSON.parse(data));\n  });\n  es.addEventListener(\"data\", ({\n    lastEventId: url,\n    data\n  }) => {\n    actions.addDataEvent({\n      url,\n      data: JSON.parse(data),\n      timestamp\n    });\n  });\n  es.addEventListener(\"close\", e => {\n    actions.addInfoEvent(\"Connection with server closed.\");\n    actions.addInfoEvent(\"Processing scan data...\");\n    actions.setScanInProgress(false);\n    es.close();\n  });\n  es.addEventListener(\"servererror\", ({\n    lastEventId: url,\n    data\n  }) => {\n    console.log(\"Servererror event lastEventId\", url);\n    console.log(\"Servererror event data\", data);\n    actions.addErrorEvent(\"An error occurred: \" + data);\n    actions.setScanInProgress(false);\n    es.close();\n  });\n\n  es.onerror = err => {\n    console.warn(\"Actual error event\", err);\n    actions.addErrorEvent(\"An es.onerror occurred\");\n    actions.setScanInProgress(false);\n    es.close();\n  };\n};\nexport const setDb = (state, db) => {\n  state.db = db;\n};\nexport const initDb = async actions => {\n  const db = new Model();\n  actions.setDb(db);\n};","map":null,"metadata":{},"sourceType":"module"}