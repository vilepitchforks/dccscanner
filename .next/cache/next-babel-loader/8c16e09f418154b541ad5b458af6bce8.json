{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/Scans/Scans.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useStoreState } from \"easy-peasy\";\nimport css from \"./Scans.module.css\";\nimport ScanThumb from \"../ScanThumb/ScanThumb.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground\";\nimport { chunkify } from \"../../lib/helpers/arrayHelpers\";\nimport ScanData from \"../ScanData/ScanData\";\n\nvar Scans = function Scans() {\n  _s();\n\n  var _useState = useState([]),\n      metaArray = _useState[0],\n      setMetaArray = _useState[1];\n\n  var _useState2 = useState(false),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      selectedWeb = _useState3[0],\n      setsSlectedWeb = _useState3[1];\n\n  var _useStoreState = useStoreState(function (state) {\n    return state;\n  }),\n      scanUrl = _useStoreState.scanUrl,\n      db = _useStoreState.db;\n\n  var scanRows = chunkify(metaArray);\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var websites;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!Object.keys(db).length) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return db.col(\"metadata\").findAsArray();\n\n            case 3:\n              _context.t0 = _context.sent;\n              _context.next = 7;\n              break;\n\n            case 6:\n              _context.t0 = [];\n\n            case 7:\n              websites = _context.t0;\n              setMetaArray(websites);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))(); // Re-fetch meta from local db after each new website has beem added\n\n  }, [scanUrl, db]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [scanRows.map(function (row, i) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css[\"scans-row\"] + \" row\",\n        children: row.map(function (thumbnail, i) {\n          return /*#__PURE__*/_jsxDEV(ScanThumb, {\n            thumbnail: thumbnail,\n            setShowModal: setShowModal,\n            setsSlectedWeb: setsSlectedWeb,\n            setMetaArray: setMetaArray\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, _this);\n        })\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, _this);\n    }), showModal && /*#__PURE__*/_jsxDEV(ModalBackground, {\n      trigger: setShowModal,\n      children: /*#__PURE__*/_jsxDEV(ScanData, {\n        selectedWeb: selectedWeb\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Scans, \"VHl4b8JU7uEeRgPy5E1TMw5+tTo=\", false, function () {\n  return [useStoreState];\n});\n\n_c = Scans;\nexport default Scans;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scans\");","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/Scans/Scans.js"],"names":["useEffect","useState","useStoreState","css","ScanThumb","ModalBackground","chunkify","ScanData","Scans","metaArray","setMetaArray","showModal","setShowModal","selectedWeb","setsSlectedWeb","state","scanUrl","db","scanRows","Object","keys","length","col","findAsArray","websites","map","row","i","thumbnail"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA,SAASC,QAAT,QAAyB,gCAAzB;AACA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAA;;AAAA,kBACgBP,QAAQ,CAAC,EAAD,CADxB;AAAA,MACXQ,SADW;AAAA,MACAC,YADA;;AAAA,mBAEgBT,QAAQ,CAAC,KAAD,CAFxB;AAAA,MAEXU,SAFW;AAAA,MAEAC,YAFA;;AAAA,mBAGoBX,QAAQ,CAAC,EAAD,CAH5B;AAAA,MAGXY,WAHW;AAAA,MAGEC,cAHF;;AAAA,uBAKMZ,aAAa,CAAC,UAAAa,KAAK;AAAA,WAAIA,KAAJ;AAAA,GAAN,CALnB;AAAA,MAKVC,OALU,kBAKVA,OALU;AAAA,MAKDC,EALC,kBAKDA,EALC;;AAOlB,MAAMC,QAAQ,GAAGZ,QAAQ,CAACG,SAAD,CAAzB;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACd,6DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEkBmB,MAAM,CAACC,IAAP,CAAYH,EAAZ,EAAgBI,MAFlC;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGWJ,EAAE,CAACK,GAAH,CAAO,UAAP,EAAmBC,WAAnB,EAHX;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,4BAIK,EAJL;;AAAA;AAEOC,cAAAA,QAFP;AAMCd,cAAAA,YAAY,CAACc,QAAD,CAAZ;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,KADc,CASd;;AACD,GAVQ,EAUN,CAACR,OAAD,EAAUC,EAAV,CAVM,CAAT;AAYA,sBACE;AAAA,eACGC,QAAQ,CAACO,GAAT,CAAa,UAACC,GAAD,EAAMC,CAAN;AAAA,0BACZ;AAAa,QAAA,SAAS,EAAExB,GAAG,CAAC,WAAD,CAAH,GAAmB,MAA3C;AAAA,kBACGuB,GAAG,CAACD,GAAJ,CAAQ,UAACG,SAAD,EAAYD,CAAZ;AAAA,8BACP,QAAC,SAAD;AAEE,YAAA,SAAS,EAAEC,SAFb;AAGE,YAAA,YAAY,EAAEhB,YAHhB;AAIE,YAAA,cAAc,EAAEE,cAJlB;AAKE,YAAA,YAAY,EAAEJ;AALhB,aACOiB,CADP;AAAA;AAAA;AAAA;AAAA,mBADO;AAAA,SAAR;AADH,SAAUA,CAAV;AAAA;AAAA;AAAA;AAAA,eADY;AAAA,KAAb,CADH,EAcGhB,SAAS,iBACR,QAAC,eAAD;AAAiB,MAAA,OAAO,EAAEC,YAA1B;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,WAAW,EAAEC;AAAvB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAfJ;AAAA,kBADF;AAsBD,CA3CD;;GAAML,K;UAKoBN,a;;;KALpBM,K;AA6CN,eAAeA,KAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useStoreState } from \"easy-peasy\";\n\nimport css from \"./Scans.module.css\";\n\nimport ScanThumb from \"../ScanThumb/ScanThumb.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground\";\n\nimport { chunkify } from \"../../lib/helpers/arrayHelpers\";\nimport ScanData from \"../ScanData/ScanData\";\n\nconst Scans = () => {\n  const [metaArray, setMetaArray] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedWeb, setsSlectedWeb] = useState(\"\");\n\n  const { scanUrl, db } = useStoreState(state => state);\n\n  const scanRows = chunkify(metaArray);\n\n  useEffect(() => {\n    (async () => {\n      // Get metadata for all locally stored website scans for initial render\n      const websites = Object.keys(db).length\n        ? await db.col(\"metadata\").findAsArray()\n        : [];\n\n      setMetaArray(websites);\n    })();\n    // Re-fetch meta from local db after each new website has beem added\n  }, [scanUrl, db]);\n\n  return (\n    <>\n      {scanRows.map((row, i) => (\n        <div key={i} className={css[\"scans-row\"] + \" row\"}>\n          {row.map((thumbnail, i) => (\n            <ScanThumb\n              key={i}\n              thumbnail={thumbnail}\n              setShowModal={setShowModal}\n              setsSlectedWeb={setsSlectedWeb}\n              setMetaArray={setMetaArray}\n            />\n          ))}\n        </div>\n      ))}\n      {showModal && (\n        <ModalBackground trigger={setShowModal}>\n          <ScanData selectedWeb={selectedWeb} />\n        </ModalBackground>\n      )}\n    </>\n  );\n};\n\nexport default Scans;\n"]},"metadata":{},"sourceType":"module"}