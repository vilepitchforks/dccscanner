{"ast":null,"code":"export const setScanUrl = (state, scanUrl) => {\n  state.scanUrl = scanUrl;\n};\nexport const setScanCtgs = (state, scanCtgs) => {\n  state.scanCtgs = scanCtgs;\n};\nexport const setMetadata = (state, meta) => {\n  state.metadata = meta;\n};\nexport const reSetScanUrl = state => {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = {};\n  state.errorEvents = [];\n};\nexport const addInfoEvent = (state, event) => {\n  state.infoEvents.push(event);\n};\nexport const addDataEvent = (state, {\n  url,\n  data\n}) => {\n  const scanData = state.dataEvents[url] || [];\n  state.dataEvents[url] = [...scanData, data];\n};\nexport const addErrorEvent = (state, event) => {\n  state.errorEvents.push(event);\n};\nexport const setScanCompleted = (state, check) => {\n  state.scanCompleted = check;\n};\nexport const startStream = async (actions, query) => {\n  const es = new EventSource(\"/api/stream?\" + query, {\n    withCredentials: true\n  });\n\n  es.onopen = () => {\n    actions.addInfoEvent(\"Connection with server established.\");\n  };\n\n  es.addEventListener(\"info\", ({\n    data\n  }) => {\n    actions.addInfoEvent(JSON.parse(data));\n  });\n  es.addEventListener(\"data\", ({\n    lastEventId: url,\n    data\n  }) => {\n    actions.addDataEvent({\n      url,\n      data: JSON.parse(data)\n    });\n  });\n  es.addEventListener(\"close\", e => {\n    actions.addInfoEvent(\"Connection with server closed.\");\n    actions.addInfoEvent(\"Processing scan data...\");\n    actions.setScanCompleted(true);\n    es.close();\n  });\n  es.addEventListener(\"servererror\", ({\n    lastEventId: url,\n    data\n  }) => {\n    console.log(\"Servererror event lastEventId\", url);\n    console.log(\"Servererror event data\", data);\n    actions.addErrorEvent(\"An error occurred: \" + data);\n    actions.setScanCompleted(true);\n    es.close();\n  });\n\n  es.onerror = err => {\n    console.warn(\"Actual error event\", err);\n    actions.addErrorEvent(\"An es.onerror occurred\");\n    actions.setScanCompleted(true);\n    es.close();\n  };\n};","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/lib/state/eventHandlers/eventHandlers.js"],"names":["setScanUrl","state","scanUrl","setScanCtgs","scanCtgs","setMetadata","meta","metadata","reSetScanUrl","infoEvents","dataEvents","errorEvents","addInfoEvent","event","push","addDataEvent","url","data","scanData","addErrorEvent","setScanCompleted","check","scanCompleted","startStream","actions","query","es","EventSource","withCredentials","onopen","addEventListener","JSON","parse","lastEventId","e","close","console","log","onerror","err","warn"],"mappings":"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","sourcesContent":["export const setScanUrl = (state, scanUrl) => {\n  state.scanUrl = scanUrl;\n};\n\nexport const setScanCtgs = (state, scanCtgs) => {\n  state.scanCtgs = scanCtgs;\n};\n\nexport const setMetadata = (state, meta) => {\n  state.metadata = meta;\n};\n\nexport const reSetScanUrl = state => {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = {};\n  state.errorEvents = [];\n};\n\nexport const addInfoEvent = (state, event) => {\n  state.infoEvents.push(event);\n};\n\nexport const addDataEvent = (state, { url, data }) => {\n  const scanData = state.dataEvents[url] || [];\n  state.dataEvents[url] = [...scanData, data];\n};\n\nexport const addErrorEvent = (state, event) => {\n  state.errorEvents.push(event);\n};\n\nexport const setScanCompleted = (state, check) => {\n  state.scanCompleted = check;\n};\n\nexport const startStream = async (actions, query) => {\n  const es = new EventSource(\"/api/stream?\" + query, {\n    withCredentials: true\n  });\n\n  es.onopen = () => {\n    actions.addInfoEvent(\"Connection with server established.\");\n  };\n  es.addEventListener(\"info\", ({ data }) => {\n    actions.addInfoEvent(JSON.parse(data));\n  });\n  es.addEventListener(\"data\", ({ lastEventId: url, data }) => {\n    actions.addDataEvent({ url, data: JSON.parse(data) });\n  });\n  es.addEventListener(\"close\", e => {\n    actions.addInfoEvent(\"Connection with server closed.\");\n    actions.addInfoEvent(\"Processing scan data...\");\n    actions.setScanCompleted(true);\n    es.close();\n  });\n  es.addEventListener(\"servererror\", ({ lastEventId: url, data }) => {\n    console.log(\"Servererror event lastEventId\", url);\n    console.log(\"Servererror event data\", data);\n    actions.addErrorEvent(\"An error occurred: \" + data);\n    actions.setScanCompleted(true);\n    es.close();\n  });\n  es.onerror = err => {\n    console.warn(\"Actual error event\", err);\n    actions.addErrorEvent(\"An es.onerror occurred\");\n    actions.setScanCompleted(true);\n    es.close();\n  };\n};\n"]},"metadata":{},"sourceType":"module"}