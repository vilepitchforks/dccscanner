{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/Scans/Scans.js\";\nimport { useEffect, useState } from \"react\";\nimport { useStoreState } from \"easy-peasy\";\nimport css from \"./Scans.module.css\";\nimport ScanThumb from \"../ScanThumb/ScanThumb.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground\";\nimport { getAllMeta } from \"../../lib/helpers/processDb\";\nimport { chunkify } from \"../../lib/helpers/handleArr\";\nimport ScanData from \"../ScanData/ScanData\";\n\nconst Scans = () => {\n  const {\n    0: metaArray,\n    1: setMetaArray\n  } = useState([]);\n  const {\n    0: showModal,\n    1: setShowModal\n  } = useState(false);\n  const {\n    0: dbName,\n    1: setDbName\n  } = useState(\"\");\n  const {\n    0: deleteDb,\n    1: setdeleteDb\n  } = useState(false);\n  const {\n    processInProgress\n  } = useStoreState(state => state);\n  const scanRows = chunkify(metaArray);\n  useEffect(() => {\n    (async () => {\n      // Get metadata for all locally stored website scans\n      const m = await getAllMeta();\n      m.ok && setMetaArray(m.meta);\n    })(); // Re-fetch meta from local db after each new website scan has started\n\n  }, [processInProgress]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [scanRows.map((row, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css[\"scans-row\"] + \" row\",\n      children: row.map((thumbnail, i) => /*#__PURE__*/_jsxDEV(ScanThumb, {\n        thumbnail: thumbnail,\n        setShowModal: setShowModal,\n        setDbName: setDbName,\n        setdeleteDb: setdeleteDb\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)), showModal && /*#__PURE__*/_jsxDEV(ModalBackground, {\n      trigger: setShowModal,\n      children: /*#__PURE__*/_jsxDEV(ScanData, {\n        dbName: dbName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Scans;","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/Scans/Scans.js"],"names":["useEffect","useState","useStoreState","css","ScanThumb","ModalBackground","getAllMeta","chunkify","ScanData","Scans","metaArray","setMetaArray","showModal","setShowModal","dbName","setDbName","deleteDb","setdeleteDb","processInProgress","state","scanRows","m","ok","meta","map","row","i","thumbnail"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACW,SAAD;AAAA,OAAYC;AAAZ,MAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACa,MAAD;AAAA,OAASC;AAAT,MAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACe,QAAD;AAAA,OAAWC;AAAX,MAA0BhB,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM;AAAEiB,IAAAA;AAAF,MAAwBhB,aAAa,CAACiB,KAAK,IAAIA,KAAV,CAA3C;AAEA,QAAMC,QAAQ,GAAGb,QAAQ,CAACG,SAAD,CAAzB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX;AACA,YAAMqB,CAAC,GAAG,MAAMf,UAAU,EAA1B;AACAe,MAAAA,CAAC,CAACC,EAAF,IAAQX,YAAY,CAACU,CAAC,CAACE,IAAH,CAApB;AACD,KAJD,IADc,CAMd;;AACD,GAPQ,EAON,CAACL,iBAAD,CAPM,CAAT;AASA,sBACE;AAAA,eACGE,QAAQ,CAACI,GAAT,CAAa,CAACC,GAAD,EAAMC,CAAN,kBACZ;AAAa,MAAA,SAAS,EAAEvB,GAAG,CAAC,WAAD,CAAH,GAAmB,MAA3C;AAAA,gBACGsB,GAAG,CAACD,GAAJ,CAAQ,CAACG,SAAD,EAAYD,CAAZ,kBACP,QAAC,SAAD;AAEE,QAAA,SAAS,EAAEC,SAFb;AAGE,QAAA,YAAY,EAAEd,YAHhB;AAIE,QAAA,SAAS,EAAEE,SAJb;AAKE,QAAA,WAAW,EAAEE;AALf,SACOS,CADP;AAAA;AAAA;AAAA;AAAA,cADD;AADH,OAAUA,CAAV;AAAA;AAAA;AAAA;AAAA,YADD,CADH,EAcGd,SAAS,iBACR,QAAC,eAAD;AAAiB,MAAA,OAAO,EAAEC,YAA1B;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,MAAM,EAAEC;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA,kBADF;AAsBD,CAzCD;;AA2CA,eAAeL,KAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useStoreState } from \"easy-peasy\";\n\nimport css from \"./Scans.module.css\";\n\nimport ScanThumb from \"../ScanThumb/ScanThumb.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground\";\n\nimport { getAllMeta } from \"../../lib/helpers/processDb\";\nimport { chunkify } from \"../../lib/helpers/handleArr\";\nimport ScanData from \"../ScanData/ScanData\";\n\nconst Scans = () => {\n  const [metaArray, setMetaArray] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [dbName, setDbName] = useState(\"\");\n  const [deleteDb, setdeleteDb] = useState(false);\n\n  const { processInProgress } = useStoreState(state => state);\n\n  const scanRows = chunkify(metaArray);\n\n  useEffect(() => {\n    (async () => {\n      // Get metadata for all locally stored website scans\n      const m = await getAllMeta();\n      m.ok && setMetaArray(m.meta);\n    })();\n    // Re-fetch meta from local db after each new website scan has started\n  }, [processInProgress]);\n\n  return (\n    <>\n      {scanRows.map((row, i) => (\n        <div key={i} className={css[\"scans-row\"] + \" row\"}>\n          {row.map((thumbnail, i) => (\n            <ScanThumb\n              key={i}\n              thumbnail={thumbnail}\n              setShowModal={setShowModal}\n              setDbName={setDbName}\n              setdeleteDb={setdeleteDb}\n            />\n          ))}\n        </div>\n      ))}\n      {showModal && (\n        <ModalBackground trigger={setShowModal}>\n          <ScanData dbName={dbName} />\n        </ModalBackground>\n      )}\n    </>\n  );\n};\n\nexport default Scans;\n"]},"metadata":{},"sourceType":"module"}