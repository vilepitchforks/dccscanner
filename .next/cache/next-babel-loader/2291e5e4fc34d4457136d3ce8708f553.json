{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nexport var chunkify = function chunkify(array) {\n  return Array.from({\n    length: Math.ceil(array.length / 4)\n  }, function (_, i) {\n    var start = i * 4;\n    return array.slice(start, start + 4);\n  });\n};\nexport var createTableData = function createTableData(dataRaw) {\n  // Creates 15X36 empty spreadsheet as a default placeholder\n  var numberOfColumns = dataRaw.length ? Object.keys(dataRaw[0]).length : 15;\n  var row = Array.from({\n    length: numberOfColumns\n  }, function (_, i) {\n    return {\n      value: \" \"\n    };\n  });\n  var emptyTable = Array.from({\n    length: 36\n  }, function (_, i) {\n    return row;\n  });\n  if (!dataRaw.length) return emptyTable; // dataRaw format:\n  // [\n  //   {url: \"url\", timestamp: \"timestamp\", scannedUrl: \"scannedUrl\", locale: \"locale\", productId: \"productId\", …},\n  //   {url: \"url\", timestamp: \"timestamp\", scannedUrl: \"scannedUrl\", locale: \"locale\", productId: \"productId\", …}\n  // ]\n  // Format needed for react-datasheet:\n  // [\n  //   [{value:  1}, {value:  3}],\n  //   [{value:  2}, {value:  4}]\n  // ]\n\n  var title = Object.keys(dataRaw[0]).map(function (titleKey) {\n    return {\n      value: titleKey\n    };\n  });\n  var bodyRaw = dataRaw.map(function (row) {\n    return Object.values(row);\n  });\n  var body = bodyRaw.map(function (row) {\n    return row.map(function (cell) {\n      return {\n        value: Array.isArray(cell) ? JSON.stringify(cell) : cell\n      };\n    });\n  });\n  return [title].concat(_toConsumableArray(body), _toConsumableArray(emptyTable));\n};","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/lib/helpers/arrayHelpers.js"],"names":["chunkify","array","Array","from","length","Math","ceil","_","i","start","slice","createTableData","dataRaw","numberOfColumns","Object","keys","row","value","emptyTable","title","map","titleKey","bodyRaw","values","body","cell","isArray","JSON","stringify"],"mappings":";AAAA,OAAO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AAC/B,SAAOC,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEC,IAAI,CAACC,IAAL,CAAUL,KAAK,CAACG,MAAN,GAAe,CAAzB;AAAV,GAAX,EAAoD,UAACG,CAAD,EAAIC,CAAJ,EAAU;AACnE,QAAMC,KAAK,GAAGD,CAAC,GAAG,CAAlB;AACA,WAAOP,KAAK,CAACS,KAAN,CAAYD,KAAZ,EAAmBA,KAAK,GAAG,CAA3B,CAAP;AACD,GAHM,CAAP;AAID,CALM;AAOP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,OAAO,EAAI;AACxC;AACA,MAAMC,eAAe,GAAGD,OAAO,CAACR,MAAR,GAAiBU,MAAM,CAACC,IAAP,CAAYH,OAAO,CAAC,CAAD,CAAnB,EAAwBR,MAAzC,GAAkD,EAA1E;AACA,MAAMY,GAAG,GAAGd,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAES;AAAV,GAAX,EAAwC,UAACN,CAAD,EAAIC,CAAJ;AAAA,WAAW;AAC7DS,MAAAA,KAAK,EAAE;AADsD,KAAX;AAAA,GAAxC,CAAZ;AAGA,MAAMC,UAAU,GAAGhB,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAX,EAA2B,UAACG,CAAD,EAAIC,CAAJ;AAAA,WAAUQ,GAAV;AAAA,GAA3B,CAAnB;AACA,MAAI,CAACJ,OAAO,CAACR,MAAb,EAAqB,OAAOc,UAAP,CAPmB,CAQxC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAGL,MAAM,CAACC,IAAP,CAAYH,OAAO,CAAC,CAAD,CAAnB,EAAwBQ,GAAxB,CAA4B,UAAAC,QAAQ;AAAA,WAAK;AAAEJ,MAAAA,KAAK,EAAEI;AAAT,KAAL;AAAA,GAApC,CAAd;AACA,MAAMC,OAAO,GAAGV,OAAO,CAACQ,GAAR,CAAY,UAAAJ,GAAG;AAAA,WAAIF,MAAM,CAACS,MAAP,CAAcP,GAAd,CAAJ;AAAA,GAAf,CAAhB;AACA,MAAMQ,IAAI,GAAGF,OAAO,CAACF,GAAR,CAAY,UAAAJ,GAAG;AAAA,WAC1BA,GAAG,CAACI,GAAJ,CAAQ,UAAAK,IAAI;AAAA,aAAK;AACfR,QAAAA,KAAK,EAAEf,KAAK,CAACwB,OAAN,CAAcD,IAAd,IAAsBE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAtB,GAA6CA;AADrC,OAAL;AAAA,KAAZ,CAD0B;AAAA,GAAf,CAAb;AAMA,UAAQN,KAAR,4BAAkBK,IAAlB,sBAA2BN,UAA3B;AACD,CA5BM","sourcesContent":["export const chunkify = array => {\n  return Array.from({ length: Math.ceil(array.length / 4) }, (_, i) => {\n    const start = i * 4;\n    return array.slice(start, start + 4);\n  });\n};\n\nexport const createTableData = dataRaw => {\n  // Creates 15X36 empty spreadsheet as a default placeholder\n  const numberOfColumns = dataRaw.length ? Object.keys(dataRaw[0]).length : 15;\n  const row = Array.from({ length: numberOfColumns }, (_, i) => ({\n    value: \" \"\n  }));\n  const emptyTable = Array.from({ length: 36 }, (_, i) => row);\n  if (!dataRaw.length) return emptyTable;\n  // dataRaw format:\n  // [\n  //   {url: \"url\", timestamp: \"timestamp\", scannedUrl: \"scannedUrl\", locale: \"locale\", productId: \"productId\", …},\n  //   {url: \"url\", timestamp: \"timestamp\", scannedUrl: \"scannedUrl\", locale: \"locale\", productId: \"productId\", …}\n  // ]\n\n  // Format needed for react-datasheet:\n  // [\n  //   [{value:  1}, {value:  3}],\n  //   [{value:  2}, {value:  4}]\n  // ]\n  const title = Object.keys(dataRaw[0]).map(titleKey => ({ value: titleKey }));\n  const bodyRaw = dataRaw.map(row => Object.values(row));\n  const body = bodyRaw.map(row =>\n    row.map(cell => ({\n      value: Array.isArray(cell) ? JSON.stringify(cell) : cell\n    }))\n  );\n\n  return [title, ...body, ...emptyTable];\n};\n"]},"metadata":{},"sourceType":"module"}