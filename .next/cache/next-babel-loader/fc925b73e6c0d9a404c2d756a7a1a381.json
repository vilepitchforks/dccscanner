{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as xlsx from \"xlsx\";\nimport { formatTs } from \"../../lib/helpers/formatTimestamps.js\";\nimport { localeRgx } from \"../../lib/helpers/regex.js\";\nexport var handleDownloadXlsAll = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(db, scannedUrl) {\n    var title, websiteData, tsSet, timestamps, workbookData, workbook;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            title = makeReportName(scannedUrl, \"xlsx\");\n            _context.prev = 1;\n            _context.next = 4;\n            return db.col(\"dccdata\").findAsArray({\n              url: scannedUrl\n            }, {\n              _id: 0,\n              url: 0\n            });\n\n          case 4:\n            websiteData = _context.sent;\n            websiteData = websiteData // Where category field is an array of objects, extract only the \"name\" value\n            .map(function (item) {\n              if (Array.isArray(item.categoryPath)) item.categoryPath = item.categoryPath.reduce(function (acc, curr) {\n                if (curr.Name) return acc = curr.Name;\n              }, \"\");\n              return item;\n            });\n            tsSet = new Set(websiteData.map(function (d) {\n              return d.timestamp;\n            }));\n            timestamps = Array.from(tsSet).reverse(); // Group data by timestamp\n\n            workbookData = timestamps.map(function (tStamp) {\n              return websiteData.filter(function (row) {\n                return row.timestamp === tStamp;\n              });\n            });\n            workbook = xlsx.utils.book_new();\n            workbookData.forEach(function (sheet, i) {\n              sheet.forEach(function (row) {\n                return delete row.timestamp;\n              });\n              var wsName = formatTs(timestamps[i]);\n              var worksheet = xlsx.utils.json_to_sheet(sheet);\n              xlsx.utils.book_append_sheet(workbook, worksheet, wsName);\n            });\n            xlsx.writeFile(workbook, title);\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](1);\n            console.warn(\"An error occurred while creating the report!\", _context.t0);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 14]]);\n  }));\n\n  return function handleDownloadXlsAll(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var handleDownloadXls = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(scannedUrl, reportData) {\n    var title, workbook, wsName, worksheet;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Remove timestamps\n            reportData = reportData.map(function (row) {\n              var timestamp = row.timestamp,\n                  remainingKeys = _objectWithoutProperties(row, [\"timestamp\"]);\n\n              return remainingKeys;\n            });\n            title = makeReportName(scannedUrl, \"xlsx\");\n\n            try {\n              workbook = xlsx.utils.book_new();\n              wsName = formatTs(new Date().getTime());\n              worksheet = xlsx.utils.json_to_sheet(reportData);\n              xlsx.utils.book_append_sheet(workbook, worksheet, wsName);\n              xlsx.writeFile(workbook, title);\n            } catch (error) {\n              console.warn(\"An error occurred while creating the report!\", error);\n            }\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function handleDownloadXls(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var handleDownloadCsvBlob = function handleDownloadCsvBlob(scannedUrl, reportData) {\n  // Remove timestamps\n  reportData = reportData.map(function (row) {\n    var timestamp = row.timestamp,\n        remainingKeys = _objectWithoutProperties(row, [\"timestamp\"]);\n\n    return remainingKeys;\n  });\n  var reportTitle = makeReportName(scannedUrl, \"csv\");\n\n  try {\n    var worksheet = xlsx.utils.json_to_sheet(reportData);\n    var csv = xlsx.utils.sheet_to_csv(worksheet);\n    window.URL = window.URL || window.webkiURL;\n    var blob = new Blob([csv]);\n    var blobURL = window.URL.createObjectURL(blob);\n    return {\n      reportTitle: reportTitle,\n      blobURL: blobURL\n    };\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\nexport var handleDownloadJsonBlob = function handleDownloadJsonBlob(scannedUrl, reportData) {\n  // Remove timestamps\n  reportData = reportData.map(function (row) {\n    var timestamp = row.timestamp,\n        remainingKeys = _objectWithoutProperties(row, [\"timestamp\"]);\n\n    return remainingKeys;\n  });\n  var reportTitle = makeReportName(scannedUrl, \"json\");\n\n  try {\n    window.URL = window.URL || window.webkiURL;\n    var blob = new Blob([JSON.stringify(reportData, null, 2)]);\n    var blobURL = window.URL.createObjectURL(blob);\n    return {\n      reportTitle: reportTitle,\n      blobURL: blobURL\n    };\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\n\nvar makeReportName = function makeReportName(scannedUrl, extension) {\n  var urlRN = scannedUrl.replace(/http(|s)\\:\\/\\//, \"\").split(localeRgx)[0];\n  if (urlRN.slice(-1) === \"/\") urlRN = urlRN.slice(0, urlRN.length - 1);\n  return \"bvDCC_extract_\".concat(urlRN, \"_\").concat(new Date().getTime(), \".\").concat(extension);\n};","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/DownloadIcons/DownloadIcons.helper.js"],"names":["xlsx","formatTs","localeRgx","handleDownloadXlsAll","db","scannedUrl","title","makeReportName","col","findAsArray","url","_id","websiteData","map","item","Array","isArray","categoryPath","reduce","acc","curr","Name","tsSet","Set","d","timestamp","timestamps","from","reverse","workbookData","tStamp","filter","row","workbook","utils","book_new","forEach","sheet","i","wsName","worksheet","json_to_sheet","book_append_sheet","writeFile","console","warn","handleDownloadXls","reportData","remainingKeys","Date","getTime","error","handleDownloadCsvBlob","reportTitle","csv","sheet_to_csv","window","URL","webkiURL","blob","Blob","blobURL","createObjectURL","handleDownloadJsonBlob","JSON","stringify","extension","urlRN","replace","split","slice","length"],"mappings":"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","sourcesContent":["import * as xlsx from \"xlsx\";\n\nimport { formatTs } from \"../../lib/helpers/formatTimestamps.js\";\nimport { localeRgx } from \"../../lib/helpers/regex.js\";\n\nexport const handleDownloadXlsAll = async (db, scannedUrl) => {\n  const title = makeReportName(scannedUrl, \"xlsx\");\n\n  try {\n    // Fetch all data for one website from db\n    let websiteData = await db\n      .col(\"dccdata\")\n      .findAsArray({ url: scannedUrl }, { _id: 0, url: 0 });\n\n    websiteData = websiteData\n      // Where category field is an array of objects, extract only the \"name\" value\n      .map(item => {\n        if (Array.isArray(item.categoryPath))\n          item.categoryPath = item.categoryPath.reduce((acc, curr) => {\n            if (curr.Name) return (acc = curr.Name);\n          }, \"\");\n        return item;\n      });\n\n    const tsSet = new Set(websiteData.map(d => d.timestamp));\n    const timestamps = Array.from(tsSet).reverse();\n\n    // Group data by timestamp\n    const workbookData = timestamps.map(tStamp =>\n      websiteData.filter(row => row.timestamp === tStamp)\n    );\n\n    const workbook = xlsx.utils.book_new();\n\n    workbookData.forEach((sheet, i) => {\n      sheet.forEach(row => delete row.timestamp);\n\n      const wsName = formatTs(timestamps[i]);\n\n      const worksheet = xlsx.utils.json_to_sheet(sheet);\n      xlsx.utils.book_append_sheet(workbook, worksheet, wsName);\n    });\n\n    xlsx.writeFile(workbook, title);\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\n\nexport const handleDownloadXls = async (scannedUrl, reportData) => {\n  // Remove timestamps\n  reportData = reportData.map(row => {\n    const { timestamp, ...remainingKeys } = row;\n    return remainingKeys;\n  });\n\n  const title = makeReportName(scannedUrl, \"xlsx\");\n\n  try {\n    const workbook = xlsx.utils.book_new();\n\n    const wsName = formatTs(new Date().getTime());\n\n    const worksheet = xlsx.utils.json_to_sheet(reportData);\n\n    xlsx.utils.book_append_sheet(workbook, worksheet, wsName);\n\n    xlsx.writeFile(workbook, title);\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\n\nexport const handleDownloadCsvBlob = (scannedUrl, reportData) => {\n  // Remove timestamps\n  reportData = reportData.map(row => {\n    const { timestamp, ...remainingKeys } = row;\n    return remainingKeys;\n  });\n\n  const reportTitle = makeReportName(scannedUrl, \"csv\");\n\n  try {\n    const worksheet = xlsx.utils.json_to_sheet(reportData);\n\n    const csv = xlsx.utils.sheet_to_csv(worksheet);\n\n    window.URL = window.URL || window.webkiURL;\n    const blob = new Blob([csv]);\n    const blobURL = window.URL.createObjectURL(blob);\n\n    return { reportTitle, blobURL };\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\n\nexport const handleDownloadJsonBlob = (scannedUrl, reportData) => {\n  // Remove timestamps\n  reportData = reportData.map(row => {\n    const { timestamp, ...remainingKeys } = row;\n    return remainingKeys;\n  });\n\n  const reportTitle = makeReportName(scannedUrl, \"json\");\n\n  try {\n    window.URL = window.URL || window.webkiURL;\n    const blob = new Blob([JSON.stringify(reportData, null, 2)]);\n    const blobURL = window.URL.createObjectURL(blob);\n\n    return { reportTitle, blobURL };\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\n\nconst makeReportName = (scannedUrl, extension) => {\n  let urlRN = scannedUrl.replace(/http(|s)\\:\\/\\//, \"\").split(localeRgx)[0];\n  if (urlRN.slice(-1) === \"/\") urlRN = urlRN.slice(0, urlRN.length - 1);\n  return `bvDCC_extract_${urlRN}_${new Date().getTime()}.${extension}`;\n};\n"]},"metadata":{},"sourceType":"module"}