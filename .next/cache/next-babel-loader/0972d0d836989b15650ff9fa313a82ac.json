{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nexport var setScanUrl = function setScanUrl(state, scanUrl) {\n  state.scanUrl = scanUrl;\n};\nexport var setScanCtgs = function setScanCtgs(state, scanCtgs) {\n  state.scanCtgs = scanCtgs;\n};\nexport var setMetadata = function setMetadata(state, meta) {\n  state.metadata = meta;\n};\nexport var reSetScanUrl = function reSetScanUrl(state) {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = {};\n  state.errorEvents = [];\n};\nexport var addInfoEvent = function addInfoEvent(state, event) {\n  state.infoEvents.push(event);\n};\nexport var addDataEvent = function addDataEvent(state, _ref) {\n  var url = _ref.url,\n      data = _ref.data;\n  var scanData = state.dataEvents[url] || [];\n  state.dataEvents[url] = [].concat(_toConsumableArray(scanData), [data]);\n};\nexport var addErrorEvent = function addErrorEvent(state, event) {\n  state.errorEvents.push(event);\n};\nexport var setScanCompleted = function setScanCompleted(state, check) {\n  state.scanCompleted = check;\n}; // Check switch for the entire process from starting scan to the storing of data in db:\n\nexport var setProcessInProgress = function setProcessInProgress(state, check) {\n  state.processInProgress = check;\n};\nexport var startStream = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(actions, query) {\n    var es;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            es = new EventSource(\"/api/stream?\" + query, {\n              withCredentials: true\n            });\n\n            es.onopen = function () {\n              actions.addInfoEvent(\"Connection with server established.\");\n            };\n\n            es.addEventListener(\"info\", function (_ref3) {\n              var data = _ref3.data;\n              actions.addInfoEvent(JSON.parse(data));\n            });\n            es.addEventListener(\"data\", function (_ref4) {\n              var url = _ref4.lastEventId,\n                  data = _ref4.data;\n              actions.addDataEvent({\n                url: url,\n                data: JSON.parse(data)\n              });\n            });\n            es.addEventListener(\"close\", function (e) {\n              actions.addInfoEvent(\"Connection with server closed.\");\n              actions.addInfoEvent(\"Processing scan data...\");\n              actions.setScanCompleted(true);\n              es.close();\n            });\n            es.addEventListener(\"servererror\", function (_ref5) {\n              var url = _ref5.lastEventId,\n                  data = _ref5.data;\n              console.log(\"Servererror event lastEventId\", url);\n              console.log(\"Servererror event data\", data);\n              actions.addErrorEvent(\"An error occurred: \" + data);\n              actions.setScanCompleted(true);\n              actions.setProcessInProgress(false); // In case of error, close the process\n\n              es.close();\n            });\n\n            es.onerror = function (err) {\n              console.warn(\"Actual error event\", err);\n              actions.addErrorEvent(\"An es.onerror occurred\");\n              actions.setScanCompleted(true);\n              actions.setProcessInProgress(false); // In case of error, close the process\n\n              es.close();\n            };\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function startStream(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}