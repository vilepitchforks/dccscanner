{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanModal/NewScanModal.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\nimport css from \"./NewScanModal.module.css\";\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { getSingleMeta, makeStoreData } from \"../../lib/helpers/processDb.js\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\n\nvar NewScanModal = function NewScanModal(_ref) {\n  _s();\n\n  var isNew = _ref.isNew,\n      setIsNew = _ref.setIsNew,\n      setNewScan = _ref.setNewScan;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      url = _useState2[0],\n      setUrl = _useState2[1];\n\n  var _useState3 = useState([]),\n      slugs = _useState3[0],\n      setSlugs = _useState3[1];\n\n  var _useStoreState = useStoreState(function (state) {\n    return state;\n  }),\n      scanCtgs = _useStoreState.scanCtgs;\n\n  var actions = useStoreActions(function (actions) {\n    return actions;\n  });\n\n  var handleSlugs = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var website, storeMetaData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setUrl(\"\");\n\n              if (urlRgx.test(url)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              setIsNew(false);\n              setLoading(true); // Check if metadata exists in local db\n              // const {ok,data}= await getSingleMeta(url)\n              // if (ok) {\n              //   actions.setScanUrl(url);\n              // } else {\n              // }\n\n              _context.next = 7;\n              return slugDriver({\n                query: \"url=\" + url\n              });\n\n            case 7:\n              website = _context.sent;\n              actions.setScanUrl(url); // Store website metadata to local db\n\n              storeMetaData = makeStoreData(url, actions, true);\n              _context.t0 = website;\n\n              if (!_context.t0) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 14;\n              return storeMetaData(website.metadata);\n\n            case 14:\n              website && actions.setMetadata(website.metadata);\n              website && setSlugs(website.slugs);\n              website && setLoading(false); // In case of errors while fetching metadata, reset the loading screen\n\n              if (!website) {\n                setIsNew(true);\n                setLoading(false);\n              }\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSlugs() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Cleanup function, resets all url data each tome Modal component unmounts\n\n\n  useEffect(function () {\n    return function () {\n      return setIsNew(true);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ModalBackground, {\n    trigger: setNewScan,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.modal,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"three columns\",\n          children: /*#__PURE__*/_jsxDEV(NewScanForm, {\n            url: url,\n            setUrl: setUrl,\n            slugs: slugs,\n            handleSlugs: handleSlugs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(WebCard, {\n          loading: loading,\n          isNew: isNew\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: scanCtgs && /*#__PURE__*/_jsxDEV(NewScanInit, {\n          setNewScan: setNewScan\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 24\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(NewScanModal, \"oX4FExHVWd0jLOt8KthK/603T3g=\", false, function () {\n  return [useStoreState, useStoreActions];\n});\n\n_c = NewScanModal;\nexport default NewScanModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewScanModal\");","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanModal/NewScanModal.js"],"names":["useEffect","useState","useStoreActions","useStoreState","NewScanForm","WebCard","NewScanInit","ModalBackground","css","slugDriver","getSingleMeta","makeStoreData","urlRgx","NewScanModal","isNew","setIsNew","setNewScan","loading","setLoading","url","setUrl","slugs","setSlugs","state","scanCtgs","actions","handleSlugs","test","query","website","setScanUrl","storeMetaData","metadata","setMetadata","modal"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\n\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\n\nimport css from \"./NewScanModal.module.css\";\n\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { getSingleMeta, makeStoreData } from \"../../lib/helpers/processDb.js\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\n\nconst NewScanModal = ({ isNew, setIsNew, setNewScan }) => {\n  const [loading, setLoading] = useState(false);\n  const [url, setUrl] = useState(\"\");\n  const [slugs, setSlugs] = useState([]);\n\n  const { scanCtgs } = useStoreState(state => state);\n  const actions = useStoreActions(actions => actions);\n\n  const handleSlugs = async () => {\n    setUrl(\"\");\n\n    if (!urlRgx.test(url)) return;\n\n    setIsNew(false);\n    setLoading(true);\n    // Check if metadata exists in local db\n    // const {ok,data}= await getSingleMeta(url)\n    // if (ok) {\n\n    //   actions.setScanUrl(url);\n    // } else {\n\n    // }\n    let website = await slugDriver({ query: \"url=\" + url });\n    actions.setScanUrl(url);\n\n    // Store website metadata to local db\n    const storeMetaData = makeStoreData(url, actions, true);\n    website && (await storeMetaData(website.metadata));\n\n    website && actions.setMetadata(website.metadata);\n    website && setSlugs(website.slugs);\n    website && setLoading(false);\n\n    // In case of errors while fetching metadata, reset the loading screen\n    if (!website) {\n      setIsNew(true);\n      setLoading(false);\n    }\n  };\n\n  // Cleanup function, resets all url data each tome Modal component unmounts\n  useEffect(() => () => setIsNew(true), []);\n\n  return (\n    <ModalBackground trigger={setNewScan}>\n      <div className={css.modal}>\n        <div className=\"row flex\">\n          <div className=\"three columns\">\n            <NewScanForm\n              url={url}\n              setUrl={setUrl}\n              slugs={slugs}\n              handleSlugs={handleSlugs}\n            />\n          </div>\n          <WebCard loading={loading} isNew={isNew} />\n        </div>\n        <div className=\"row\">\n          {/* Do not display START SCAN button until URL and categories are prepared */}\n          {scanCtgs && <NewScanInit setNewScan={setNewScan} />}\n        </div>\n      </div>\n    </ModalBackground>\n  );\n};\n\nexport default NewScanModal;\n"]},"metadata":{},"sourceType":"module"}