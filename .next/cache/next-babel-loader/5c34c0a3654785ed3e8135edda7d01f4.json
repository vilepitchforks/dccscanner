{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanModal/NewScanModal.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\nimport css from \"./NewScanModal.module.css\";\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { getSingleMeta, makeStoreData } from \"../../lib/helpers/processDb.js\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\n\nconst NewScanModal = ({\n  isNew,\n  setIsNew,\n  setNewScan\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: url,\n    1: setUrl\n  } = useState(\"\");\n  const {\n    0: slugs,\n    1: setSlugs\n  } = useState([]);\n  const {\n    scanCtgs\n  } = useStoreState(state => state);\n  const actions = useStoreActions(actions => actions);\n\n  const handleSlugs = async () => {\n    setUrl(\"\");\n    if (!urlRgx.test(url)) return;\n    actions.setScanUrl(url);\n    setIsNew(false);\n    setLoading(true);\n    let website; // // Check if metadata exists in local db\n\n    const {\n      ok,\n      data\n    } = await getSingleMeta(url);\n\n    if (ok && data) {\n      actions.setMetadata(data);\n      setSlugs(data.slugs);\n    } else {\n      // If website does not exist in local db, fetch metadata\n      website = await slugDriver({\n        query: \"url=\" + url\n      }); // Store website metadata and slugs to local db\n\n      const storeMetaData = makeStoreData(url, actions, true);\n      website && (await storeMetaData(_objectSpread(_objectSpread({}, website.metadata), {}, {\n        slugs: website.slugs\n      })));\n      website && actions.setMetadata(website.metadata);\n      website && setSlugs(website.slugs);\n      website && setLoading(false);\n    } // In case of errors while fetching metadata, reset the loading screen\n\n\n    if (!website) {\n      setIsNew(true);\n      setLoading(false);\n    }\n  }; // Cleanup function, resets all url data each tome Modal component unmounts\n\n\n  useEffect(() => () => setIsNew(true), []);\n  return /*#__PURE__*/_jsxDEV(ModalBackground, {\n    trigger: setNewScan,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.modal,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"three columns\",\n          children: /*#__PURE__*/_jsxDEV(NewScanForm, {\n            url: url,\n            setUrl: setUrl,\n            slugs: slugs,\n            handleSlugs: handleSlugs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WebCard, {\n          loading: loading,\n          isNew: isNew\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: scanCtgs && /*#__PURE__*/_jsxDEV(NewScanInit, {\n          setNewScan: setNewScan\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\nexport default NewScanModal;","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanModal/NewScanModal.js"],"names":["useEffect","useState","useStoreActions","useStoreState","NewScanForm","WebCard","NewScanInit","ModalBackground","css","slugDriver","getSingleMeta","makeStoreData","urlRgx","NewScanModal","isNew","setIsNew","setNewScan","loading","setLoading","url","setUrl","slugs","setSlugs","scanCtgs","state","actions","handleSlugs","test","setScanUrl","website","ok","data","setMetadata","query","storeMetaData","metadata","modal"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\n\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\n\nimport css from \"./NewScanModal.module.css\";\n\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { getSingleMeta, makeStoreData } from \"../../lib/helpers/processDb.js\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\n\nconst NewScanModal = ({ isNew, setIsNew, setNewScan }) => {\n  const [loading, setLoading] = useState(false);\n  const [url, setUrl] = useState(\"\");\n  const [slugs, setSlugs] = useState([]);\n\n  const { scanCtgs } = useStoreState(state => state);\n  const actions = useStoreActions(actions => actions);\n\n  const handleSlugs = async () => {\n    setUrl(\"\");\n\n    if (!urlRgx.test(url)) return;\n    actions.setScanUrl(url);\n\n    setIsNew(false);\n    setLoading(true);\n\n    let website;\n\n    // // Check if metadata exists in local db\n    const { ok, data } = await getSingleMeta(url);\n\n    if (ok && data) {\n      actions.setMetadata(data);\n      setSlugs(data.slugs);\n    } else {\n      // If website does not exist in local db, fetch metadata\n      website = await slugDriver({ query: \"url=\" + url });\n\n      // Store website metadata and slugs to local db\n      const storeMetaData = makeStoreData(url, actions, true);\n      website &&\n        (await storeMetaData({ ...website.metadata, slugs: website.slugs }));\n\n      website && actions.setMetadata(website.metadata);\n      website && setSlugs(website.slugs);\n      website && setLoading(false);\n    }\n\n    // In case of errors while fetching metadata, reset the loading screen\n    if (!website) {\n      setIsNew(true);\n      setLoading(false);\n    }\n  };\n\n  // Cleanup function, resets all url data each tome Modal component unmounts\n  useEffect(() => () => setIsNew(true), []);\n\n  return (\n    <ModalBackground trigger={setNewScan}>\n      <div className={css.modal}>\n        <div className=\"row flex\">\n          <div className=\"three columns\">\n            <NewScanForm\n              url={url}\n              setUrl={setUrl}\n              slugs={slugs}\n              handleSlugs={handleSlugs}\n            />\n          </div>\n          <WebCard loading={loading} isNew={isNew} />\n        </div>\n        <div className=\"row\">\n          {/* Do not display START SCAN button until URL and categories are prepared */}\n          {scanCtgs && <NewScanInit setNewScan={setNewScan} />}\n        </div>\n      </div>\n    </ModalBackground>\n  );\n};\n\nexport default NewScanModal;\n"]},"metadata":{},"sourceType":"module"}