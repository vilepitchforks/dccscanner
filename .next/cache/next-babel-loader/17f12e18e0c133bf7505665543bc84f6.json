{"ast":null,"code":"const makeDriver = ({\n  method,\n  endpoint,\n  format\n}) => async ({\n  email,\n  query,\n  body\n}) => {\n  try {\n    // Reset repeated additions of query to endpoint\n    endpoint = endpoint.split(\"?\")[0];\n    endpoint = query ? endpoint + \"?\" + query : endpoint;\n    const options = {\n      method,\n      credentials: \"same-origin\",\n      headers: {}\n    };\n    if (email) options.headers.Authorization = \"Basic \" + btoa(email);\n    if (body) options.body = JSON.stringify(body);\n    let status;\n    const result = await fetch(endpoint, options).then(res => {\n      status = res.status;\n      return res[format]();\n    });\n\n    if (status === 200 || status === 201) {\n      return result;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.warn(\"driver err\", error);\n    return false;\n  }\n};\n\nexport const authDriver = makeDriver({\n  method: \"POST\",\n  endpoint: \"/api/auth\",\n  format: \"text\"\n});\nexport const scanDriver = makeDriver({\n  method: \"GET\",\n  endpoint: \"/api/scan\",\n  format: \"json\"\n});\nexport const slugDriver = makeDriver({\n  method: \"GET\",\n  endpoint: \"/api/slug\",\n  format: \"json\"\n});","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/lib/drivers/restDrivers.js"],"names":["makeDriver","method","endpoint","format","email","query","body","split","options","credentials","headers","Authorization","btoa","JSON","stringify","status","result","fetch","then","res","error","console","warn","authDriver","scanDriver","slugDriver"],"mappings":"AAAA,MAAMA,UAAU,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoBC,EAAAA;AAApB,CAAD,KAAkC,OAAO;AAC1DC,EAAAA,KAD0D;AAE1DC,EAAAA,KAF0D;AAG1DC,EAAAA;AAH0D,CAAP,KAI/C;AACJ,MAAI;AACF;AACAJ,IAAAA,QAAQ,GAAGA,QAAQ,CAACK,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAX;AACAL,IAAAA,QAAQ,GAAGG,KAAK,GAAGH,QAAQ,GAAG,GAAX,GAAiBG,KAApB,GAA4BH,QAA5C;AAEA,UAAMM,OAAO,GAAG;AACdP,MAAAA,MADc;AAEdQ,MAAAA,WAAW,EAAE,aAFC;AAGdC,MAAAA,OAAO,EAAE;AAHK,KAAhB;AAMA,QAAIN,KAAJ,EAAWI,OAAO,CAACE,OAAR,CAAgBC,aAAhB,GAAgC,WAAWC,IAAI,CAACR,KAAD,CAA/C;AACX,QAAIE,IAAJ,EAAUE,OAAO,CAACF,IAAR,GAAeO,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAf;AAEV,QAAIS,MAAJ;AAEA,UAAMC,MAAM,GAAG,MAAMC,KAAK,CAACf,QAAD,EAAWM,OAAX,CAAL,CAAyBU,IAAzB,CAA8BC,GAAG,IAAI;AACxDJ,MAAAA,MAAM,GAAGI,GAAG,CAACJ,MAAb;AACA,aAAOI,GAAG,CAAChB,MAAD,CAAH,EAAP;AACD,KAHoB,CAArB;;AAKA,QAAIY,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AACpC,aAAOC,MAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF,GA1BD,CA0BE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,IAAR,CAAa,YAAb,EAA2BF,KAA3B;AACA,WAAO,KAAP;AACD;AACF,CAnCD;;AAqCA,OAAO,MAAMG,UAAU,GAAGvB,UAAU,CAAC;AACnCC,EAAAA,MAAM,EAAE,MAD2B;AAEnCC,EAAAA,QAAQ,EAAE,WAFyB;AAGnCC,EAAAA,MAAM,EAAE;AAH2B,CAAD,CAA7B;AAMP,OAAO,MAAMqB,UAAU,GAAGxB,UAAU,CAAC;AACnCC,EAAAA,MAAM,EAAE,KAD2B;AAEnCC,EAAAA,QAAQ,EAAE,WAFyB;AAGnCC,EAAAA,MAAM,EAAE;AAH2B,CAAD,CAA7B;AAMP,OAAO,MAAMsB,UAAU,GAAGzB,UAAU,CAAC;AACnCC,EAAAA,MAAM,EAAE,KAD2B;AAEnCC,EAAAA,QAAQ,EAAE,WAFyB;AAGnCC,EAAAA,MAAM,EAAE;AAH2B,CAAD,CAA7B","sourcesContent":["const makeDriver = ({ method, endpoint, format }) => async ({\n  email,\n  query,\n  body\n}) => {\n  try {\n    // Reset repeated additions of query to endpoint\n    endpoint = endpoint.split(\"?\")[0];\n    endpoint = query ? endpoint + \"?\" + query : endpoint;\n\n    const options = {\n      method,\n      credentials: \"same-origin\",\n      headers: {}\n    };\n\n    if (email) options.headers.Authorization = \"Basic \" + btoa(email);\n    if (body) options.body = JSON.stringify(body);\n\n    let status;\n\n    const result = await fetch(endpoint, options).then(res => {\n      status = res.status;\n      return res[format]();\n    });\n\n    if (status === 200 || status === 201) {\n      return result;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.warn(\"driver err\", error);\n    return false;\n  }\n};\n\nexport const authDriver = makeDriver({\n  method: \"POST\",\n  endpoint: \"/api/auth\",\n  format: \"text\"\n});\n\nexport const scanDriver = makeDriver({\n  method: \"GET\",\n  endpoint: \"/api/scan\",\n  format: \"json\"\n});\n\nexport const slugDriver = makeDriver({\n  method: \"GET\",\n  endpoint: \"/api/slug\",\n  format: \"json\"\n});\n"]},"metadata":{},"sourceType":"module"}