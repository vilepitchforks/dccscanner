{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport zango from \"zangodb\";\nexport var Model = /*#__PURE__*/function () {\n  function Model() {\n    _classCallCheck(this, Model);\n\n    var db = new zango.Db(\"dcc\", {\n      // sets the schema, scannedUrl and url are the same url sent by the user\n      metadata: [\"scannedUrl\"],\n      dccdata: [\"url\", \"timestamp\"]\n    });\n    db.open(); // creates the db and collections\n\n    db.on(\"blocked\", function () {\n      console.warn(\"database version cannot be upgraded\");\n    });\n    this.db = db;\n    this.colLabel = \"\";\n  }\n\n  _createClass(Model, [{\n    key: \"col\",\n    value: function col(collection) {\n      // Used in conjuction with methods that return Cursor and need extra processing, for example db.find()\n      this.colLabel = collection;\n      return this;\n    }\n  }, {\n    key: \"collection\",\n    value: function collection(_collection) {\n      // Returns Collection on Model.db instance\n      return this.db.collection(_collection);\n    }\n  }, {\n    key: \"findAsArray\",\n    value: function () {\n      var _findAsArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, options) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.db.collection(this.colLabel).find(query, options).toArray();\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function findAsArray(_x, _x2) {\n        return _findAsArray.apply(this, arguments);\n      }\n\n      return findAsArray;\n    }()\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Promise.all([this.db.collection(\"metadata\").remove({\n                  scannedUrl: url\n                }), this.db.collection(\"dccdata\").remove({\n                  url: url\n                })]);\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function remove(_x3) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n  }]);\n\n  return Model;\n}();","map":null,"metadata":{},"sourceType":"module"}