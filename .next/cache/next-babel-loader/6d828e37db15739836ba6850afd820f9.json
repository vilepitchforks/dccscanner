{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/CurrentScan/CurrentScan.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport css from \"./CurrentScan.module.css\";\nimport ScanLog from \"../ScanLog/ScanLog\";\n\nvar CurrentScan = function CurrentScan() {\n  _s();\n\n  var _useState = useState(false),\n      viewLog = _useState[0],\n      setViewLog = _useState[1];\n\n  var _useStoreState = useStoreState(function (state) {\n    return state;\n  }),\n      scanUrl = _useStoreState.scanUrl,\n      metadata = _useStoreState.metadata,\n      dataEvents = _useStoreState.dataEvents,\n      db = _useStoreState.db,\n      scanInProgress = _useStoreState.scanInProgress;\n\n  var actions = useStoreActions(function (actions) {\n    return actions;\n  });\n  useEffect(function () {\n    scanUrl && !scanInProgress && actions.addInfoEvent(\"Scan data for \".concat(scanUrl, \" successfully processed.\"));\n    scanUrl && !scanInProgress && !dataEvents.length && actions.addInfoEvent(\"No bvDCC data found for \".concat(scanUrl, \".\"));\n  }, [scanInProgress, dataEvents]); // Process scan data\n\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var dataItem;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dataItem = dataEvents[dataEvents.length - 1];\n              _context.t0 = dataItem;\n\n              if (!_context.t0) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 5;\n              return db.collection(\"dccdata\").insert(dataItem, function () {\n                actions.addInfoEvent(\"Scan data for item \".concat(dataItem.scannedUrl, \" successfully stored.\"));\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }, [dataEvents]); // Available items: description, icon, image, title, url\n\n  var icon = metadata.icon,\n      title = metadata.title;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"u-pull-left icon\",\n          src: icon || \"./logo192.png\",\n          alt: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: css.title,\n          children: scanUrl && title.length ? title : \"Click on the + icon in the lower right corner of the screen to start a new scan.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: css[\"view-log\"],\n        onClick: function onClick() {\n          return setViewLog(!viewLog);\n        },\n        children: [viewLog ? \"Hide\" : \"View\", \" scan log\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, _this), viewLog && /*#__PURE__*/_jsxDEV(ScanLog, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CurrentScan, \"qpebSP9z7Dukh8zEBOL6Jl7xgvg=\", false, function () {\n  return [useStoreState, useStoreActions];\n});\n\n_c = CurrentScan;\nexport default CurrentScan;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentScan\");","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/CurrentScan/CurrentScan.js"],"names":["useEffect","useState","useStoreActions","useStoreState","css","ScanLog","CurrentScan","viewLog","setViewLog","state","scanUrl","metadata","dataEvents","db","scanInProgress","actions","addInfoEvent","length","dataItem","collection","insert","scannedUrl","icon","title"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\n\nimport css from \"./CurrentScan.module.css\";\n\nimport ScanLog from \"../ScanLog/ScanLog\";\n\nconst CurrentScan = () => {\n  const [viewLog, setViewLog] = useState(false);\n\n  const { scanUrl, metadata, dataEvents, db, scanInProgress } = useStoreState(\n    state => state\n  );\n  const actions = useStoreActions(actions => actions);\n\n  useEffect(() => {\n    scanUrl &&\n      !scanInProgress &&\n      actions.addInfoEvent(`Scan data for ${scanUrl} successfully processed.`);\n\n    scanUrl &&\n      !scanInProgress &&\n      !dataEvents.length &&\n      actions.addInfoEvent(`No bvDCC data found for ${scanUrl}.`);\n  }, [scanInProgress, dataEvents]);\n\n  // Process scan data\n  useEffect(() => {\n    (async () => {\n      const dataItem = dataEvents[dataEvents.length - 1];\n      dataItem &&\n        /* dataItem.url === scanUrl && */\n        (await db.collection(\"dccdata\").insert(dataItem, () => {\n          actions.addInfoEvent(\n            `Scan data for item ${dataItem.scannedUrl} successfully stored.`\n          );\n        }));\n    })();\n  }, [dataEvents]);\n\n  // Available items: description, icon, image, title, url\n  const { icon, title } = metadata;\n\n  return (\n    <div className=\"row\">\n      <div className=\"column\">\n        <div>\n          <img\n            className=\"u-pull-left icon\"\n            src={icon || \"./logo192.png\"}\n            alt=\"icon\"\n          />\n          <h5 className={css.title}>\n            {scanUrl && title.length\n              ? title\n              : \"Click on the + icon in the lower right corner of the screen to start a new scan.\"}\n          </h5>\n        </div>\n        <span className={css[\"view-log\"]} onClick={() => setViewLog(!viewLog)}>\n          {viewLog ? \"Hide\" : \"View\"} scan log\n        </span>\n        {viewLog && <ScanLog />}\n      </div>\n    </div>\n  );\n};\n\nexport default CurrentScan;\n"]},"metadata":{},"sourceType":"module"}