{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport xlsx from \"xlsx\";\nimport { formatTs } from \"../../lib/helpers/formatTimestamps.js\";\nimport { localeRgx } from \"../../lib/helpers/regex.js\";\nexport var handleDownloadXlsAll = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(db, scannedUrl) {\n    var title, websiteData, tsSet, timestamps, workbookData, workbook;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            title = makeReportName(scannedUrl, \"xlsx\");\n            _context.prev = 1;\n            _context.next = 4;\n            return db.col(\"dccdata\").findAsArray({\n              url: scannedUrl\n            }, {\n              _id: 0,\n              url: 0\n            });\n\n          case 4:\n            websiteData = _context.sent;\n            websiteData = websiteData // Where category field is an array of objects, extract only the \"name\" value\n            .map(function (item) {\n              if (Array.isArray(item.categoryPath)) item.categoryPath = item.categoryPath.reduce(function (acc, curr) {\n                if (curr.Name) return acc = curr.Name;\n              }, \"\");\n              return item;\n            });\n            tsSet = new Set(websiteData.map(function (d) {\n              return d.timestamp;\n            }));\n            timestamps = Array.from(tsSet).reverse(); // Group data by timestamp\n\n            workbookData = timestamps.map(function (tStamp) {\n              return websiteData.filter(function (row) {\n                return row.timestamp === tStamp;\n              });\n            });\n            workbook = xlsx.utils.book_new();\n            workbookData.forEach(function (sheet, i) {\n              sheet.forEach(function (row) {\n                return delete row.timestamp;\n              });\n              var wsName = formatTs(timestamps[i]);\n              var worksheet = xlsx.utils.json_to_sheet(sheet);\n              xlsx.utils.book_append_sheet(workbook, worksheet, wsName);\n            });\n            xlsx.writeFile(workbook, title);\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](1);\n            console.warn(\"An error occurred while creating the report!\", _context.t0);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 14]]);\n  }));\n\n  return function handleDownloadXlsAll(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var handleDownloadXls = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(scannedUrl, reportData) {\n    var title, workbook, wsName, worksheet;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Remove timestamps\n            reportData = reportData.map(function (row) {\n              var timestamp = row.timestamp,\n                  remainingKeys = _objectWithoutProperties(row, [\"timestamp\"]);\n\n              return remainingKeys;\n            });\n            title = makeReportName(scannedUrl, \"xlsx\");\n\n            try {\n              workbook = xlsx.utils.book_new();\n              wsName = formatTs(new Date().getTime());\n              worksheet = xlsx.utils.json_to_sheet(reportData);\n              xlsx.utils.book_append_sheet(workbook, worksheet, wsName);\n              xlsx.writeFile(workbook, title);\n            } catch (error) {\n              console.warn(\"An error occurred while creating the report!\", error);\n            }\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function handleDownloadXls(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var handleDownloadCsvBlob = function handleDownloadCsvBlob(scannedUrl, reportData) {\n  // Remove timestamps\n  reportData = reportData.map(function (row) {\n    var timestamp = row.timestamp,\n        remainingKeys = _objectWithoutProperties(row, [\"timestamp\"]);\n\n    return remainingKeys;\n  });\n  var reportTitle = makeReportName(scannedUrl, \"csv\");\n\n  try {\n    var worksheet = xlsx.utils.json_to_sheet(reportData);\n    var csv = xlsx.utils.sheet_to_csv(worksheet);\n    window.URL = window.URL || window.webkiURL;\n    var blob = new Blob([csv]);\n    var blobURL = window.URL.createObjectURL(blob);\n    return {\n      reportTitle: reportTitle,\n      blobURL: blobURL\n    };\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\nexport var handleDownloadJsonBlob = function handleDownloadJsonBlob(scannedUrl, reportData) {\n  // Remove timestamps\n  reportData = reportData.map(function (row) {\n    var timestamp = row.timestamp,\n        remainingKeys = _objectWithoutProperties(row, [\"timestamp\"]);\n\n    return remainingKeys;\n  });\n  var reportTitle = makeReportName(scannedUrl, \"json\");\n\n  try {\n    window.URL = window.URL || window.webkiURL;\n    var blob = new Blob([JSON.stringify(reportData, null, 2)]);\n    var blobURL = window.URL.createObjectURL(blob);\n    return {\n      reportTitle: reportTitle,\n      blobURL: blobURL\n    };\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\n\nvar makeReportName = function makeReportName(scannedUrl, extension) {\n  var urlRN = scannedUrl.replace(/http(|s)\\:\\/\\//, \"\").split(localeRgx)[0];\n  if (urlRN.slice(-1) === \"/\") urlRN = urlRN.slice(0, urlRN.length - 1);\n  return \"bvDCC_extract_\".concat(urlRN, \"_\").concat(new Date().getTime(), \".\").concat(extension);\n};","map":null,"metadata":{},"sourceType":"module"}