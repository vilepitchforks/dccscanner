{"ast":null,"code":"import zango from \"zangodb\";\nexport class Model {\n  constructor() {\n    const db = new zango.Db(\"dcc\", {\n      // sets the schema, scannedUrl and url are the same url sent by the user\n      metadata: [\"scannedUrl\"],\n      dccdata: [\"url\", \"timestamp\"]\n    });\n    db.open(); // creates the db and collections\n\n    db.on(\"blocked\", () => {\n      console.warn(\"database version cannot be upgraded\");\n    });\n    this.db = db;\n    this.colLabel = \"\";\n  }\n\n  col(collection) {\n    // Used in conjuction with methods that return Cursor and need extra processing, for example db.find()\n    this.colLabel = collection;\n    return this;\n  }\n\n  collection(collection) {\n    // Returns Collection on Model.db instance\n    return this.db.collection(collection);\n  }\n\n  async findAsArray(query, options) {\n    // Used in conjuction with db.col()\n    return await this.db.collection(this.colLabel).find(query, options).toArray();\n  }\n\n  async remove(url) {\n    return await Promise.all([this.db.collection(\"metadata\").remove({\n      scannedUrl: url\n    }), this.db.collection(\"dccdata\").remove({\n      url\n    })]);\n  }\n\n}","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/lib/helpers/processDb.js"],"names":["zango","Model","constructor","db","Db","metadata","dccdata","open","on","console","warn","colLabel","col","collection","findAsArray","query","options","find","toArray","remove","url","Promise","all","scannedUrl"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AAEA,OAAO,MAAMC,KAAN,CAAY;AACjBC,EAAAA,WAAW,GAAG;AACZ,UAAMC,EAAE,GAAG,IAAIH,KAAK,CAACI,EAAV,CAAa,KAAb,EAAoB;AAC7B;AACAC,MAAAA,QAAQ,EAAE,CAAC,YAAD,CAFmB;AAG7BC,MAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,WAAR;AAHoB,KAApB,CAAX;AAKAH,IAAAA,EAAE,CAACI,IAAH,GANY,CAMD;;AACXJ,IAAAA,EAAE,CAACK,EAAH,CAAM,SAAN,EAAiB,MAAM;AACrBC,MAAAA,OAAO,CAACC,IAAR,CAAa,qCAAb;AACD,KAFD;AAGA,SAAKP,EAAL,GAAUA,EAAV;AACA,SAAKQ,QAAL,GAAgB,EAAhB;AACD;;AAEDC,EAAAA,GAAG,CAACC,UAAD,EAAa;AACd;AACA,SAAKF,QAAL,GAAgBE,UAAhB;AACA,WAAO,IAAP;AACD;;AAEDA,EAAAA,UAAU,CAACA,UAAD,EAAa;AACrB;AACA,WAAO,KAAKV,EAAL,CAAQU,UAAR,CAAmBA,UAAnB,CAAP;AACD;;AAED,QAAMC,WAAN,CAAkBC,KAAlB,EAAyBC,OAAzB,EAAkC;AAChC;AACA,WAAO,MAAM,KAAKb,EAAL,CACVU,UADU,CACC,KAAKF,QADN,EAEVM,IAFU,CAELF,KAFK,EAEEC,OAFF,EAGVE,OAHU,EAAb;AAID;;AAED,QAAMC,MAAN,CAAaC,GAAb,EAAkB;AAChB,WAAO,MAAMC,OAAO,CAACC,GAAR,CAAY,CACvB,KAAKnB,EAAL,CAAQU,UAAR,CAAmB,UAAnB,EAA+BM,MAA/B,CAAsC;AAAEI,MAAAA,UAAU,EAAEH;AAAd,KAAtC,CADuB,EAEvB,KAAKjB,EAAL,CAAQU,UAAR,CAAmB,SAAnB,EAA8BM,MAA9B,CAAqC;AAAEC,MAAAA;AAAF,KAArC,CAFuB,CAAZ,CAAb;AAID;;AAvCgB","sourcesContent":["import zango from \"zangodb\";\n\nexport class Model {\n  constructor() {\n    const db = new zango.Db(\"dcc\", {\n      // sets the schema, scannedUrl and url are the same url sent by the user\n      metadata: [\"scannedUrl\"],\n      dccdata: [\"url\", \"timestamp\"]\n    });\n    db.open(); // creates the db and collections\n    db.on(\"blocked\", () => {\n      console.warn(\"database version cannot be upgraded\");\n    });\n    this.db = db;\n    this.colLabel = \"\";\n  }\n\n  col(collection) {\n    // Used in conjuction with methods that return Cursor and need extra processing, for example db.find()\n    this.colLabel = collection;\n    return this;\n  }\n\n  collection(collection) {\n    // Returns Collection on Model.db instance\n    return this.db.collection(collection);\n  }\n\n  async findAsArray(query, options) {\n    // Used in conjuction with db.col()\n    return await this.db\n      .collection(this.colLabel)\n      .find(query, options)\n      .toArray();\n  }\n\n  async remove(url) {\n    return await Promise.all([\n      this.db.collection(\"metadata\").remove({ scannedUrl: url }),\n      this.db.collection(\"dccdata\").remove({ url })\n    ]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}