{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanInit/NewScanInit.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport { authCreds } from \"../../lib/helpers/regex\";\nimport css from \"./NewScanInit.module.css\"; // const NewScanInit = ({ setNewScan }) => {\n\nvar NewScanInit = function NewScanInit(_ref) {\n  _s();\n\n  var url = _ref.url,\n      setUrl = _ref.setUrl,\n      setNewScan = _ref.setNewScan;\n\n  var _useStoreState = useStoreState(function (state) {\n    return state;\n  }),\n      scanUrl = _useStoreState.scanUrl,\n      scanCtgs = _useStoreState.scanCtgs; // const { startStream } = useStoreActions(actions => actions);\n\n\n  var _useStoreActions = useStoreActions(function (actions) {\n    return actions;\n  }),\n      setScanUrl = _useStoreActions.setScanUrl,\n      startStream = _useStoreActions.startStream; // const handleInitScan = () => {\n  //   startStream(`url=${scanUrl}&categories=${scanCtgs}`);\n  //   // Removes the modal overlay\n  //   setNewScan(false);\n  // };\n\n\n  var handleInitScan = function handleInitScan() {\n    startStream(\"url=\".concat(url, \"&categories=\").concat(scanCtgs)); // Sets scanUrl in Redux store\n    // Check if creds are passed in the URL (https://username:password@www.website.com)\n\n    var hasCreds = authCreds.test(url); // Extract creds from the URL in format username:password@\n\n    var creds = hasCreds && url.match(authCreds)[0]; // If creds are passed, remove them from the URL\n\n    var inputURL = creds ? url.replace(creds, \"\") : url;\n    setScanUrl(inputURL); // Removes url value from local state\n\n    setUrl(\"\"); // Removes the modal overlay\n\n    setNewScan(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: css.start + \" u-full-width\",\n    onClick: function onClick() {\n      return handleInitScan();\n    },\n    children: \"Start scan\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(NewScanInit, \"ZXuOTlLRI39PyX9km+vrkyueB/Y=\", false, function () {\n  return [useStoreState, useStoreActions];\n});\n\n_c = NewScanInit;\nexport default NewScanInit;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewScanInit\");","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanInit/NewScanInit.js"],"names":["useStoreActions","useStoreState","authCreds","css","NewScanInit","url","setUrl","setNewScan","state","scanUrl","scanCtgs","actions","setScanUrl","startStream","handleInitScan","hasCreds","test","creds","match","inputURL","replace","start"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,YAA/C;AAEA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,OAAOC,GAAP,MAAgB,0BAAhB,C,CAEA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAiC;AAAA;;AAAA,MAA9BC,GAA8B,QAA9BA,GAA8B;AAAA,MAAzBC,MAAyB,QAAzBA,MAAyB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,uBACrBN,aAAa,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAJ;AAAA,GAAN,CADQ;AAAA,MAC3CC,OAD2C,kBAC3CA,OAD2C;AAAA,MAClCC,QADkC,kBAClCA,QADkC,EAEnD;;;AAFmD,yBAGfV,eAAe,CAAC,UAAAW,OAAO;AAAA,WAAIA,OAAJ;AAAA,GAAR,CAHA;AAAA,MAG3CC,UAH2C,oBAG3CA,UAH2C;AAAA,MAG/BC,WAH+B,oBAG/BA,WAH+B,EAKnD;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BD,IAAAA,WAAW,eAAQR,GAAR,yBAA0BK,QAA1B,EAAX,CAD2B,CAG3B;AACA;;AACA,QAAMK,QAAQ,GAAGb,SAAS,CAACc,IAAV,CAAeX,GAAf,CAAjB,CAL2B,CAO3B;;AACA,QAAMY,KAAK,GAAGF,QAAQ,IAAIV,GAAG,CAACa,KAAJ,CAAUhB,SAAV,EAAqB,CAArB,CAA1B,CAR2B,CAU3B;;AACA,QAAMiB,QAAQ,GAAGF,KAAK,GAAGZ,GAAG,CAACe,OAAJ,CAAYH,KAAZ,EAAmB,EAAnB,CAAH,GAA4BZ,GAAlD;AACAO,IAAAA,UAAU,CAACO,QAAD,CAAV,CAZ2B,CAc3B;;AACAb,IAAAA,MAAM,CAAC,EAAD,CAAN,CAf2B,CAiB3B;;AACAC,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAnBD;;AAqBA,sBACE;AACE,IAAA,SAAS,EAAEJ,GAAG,CAACkB,KAAJ,GAAY,eADzB;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMP,cAAc,EAApB;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CAxCD;;GAAMV,W;UAC0BH,a,EAEMD,e;;;KAHhCI,W;AA0CN,eAAeA,WAAf","sourcesContent":["import { useStoreActions, useStoreState } from \"easy-peasy\";\n\nimport { authCreds } from \"../../lib/helpers/regex\";\n\nimport css from \"./NewScanInit.module.css\";\n\n// const NewScanInit = ({ setNewScan }) => {\nconst NewScanInit = ({ url, setUrl, setNewScan }) => {\n  const { scanUrl, scanCtgs } = useStoreState(state => state);\n  // const { startStream } = useStoreActions(actions => actions);\n  const { setScanUrl, startStream } = useStoreActions(actions => actions);\n\n  // const handleInitScan = () => {\n  //   startStream(`url=${scanUrl}&categories=${scanCtgs}`);\n  //   // Removes the modal overlay\n  //   setNewScan(false);\n  // };\n\n  const handleInitScan = () => {\n    startStream(`url=${url}&categories=${scanCtgs}`);\n\n    // Sets scanUrl in Redux store\n    // Check if creds are passed in the URL (https://username:password@www.website.com)\n    const hasCreds = authCreds.test(url);\n\n    // Extract creds from the URL in format username:password@\n    const creds = hasCreds && url.match(authCreds)[0];\n\n    // If creds are passed, remove them from the URL\n    const inputURL = creds ? url.replace(creds, \"\") : url;\n    setScanUrl(inputURL);\n\n    // Removes url value from local state\n    setUrl(\"\");\n\n    // Removes the modal overlay\n    setNewScan(false);\n  };\n\n  return (\n    <button\n      className={css.start + \" u-full-width\"}\n      onClick={() => handleInitScan()}\n    >\n      Start scan\n    </button>\n  );\n};\n\nexport default NewScanInit;\n"]},"metadata":{},"sourceType":"module"}