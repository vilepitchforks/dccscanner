{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanModal/NewScanModal.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\nimport css from \"./NewScanModal.module.css\";\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\nimport { withoutCreds } from \"../../lib/helpers/withoutCreds.js\";\n\nconst NewScanModal = ({\n  isNew,\n  setIsNew,\n  setNewScan\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: url,\n    1: setUrl\n  } = useState(\"\");\n  const {\n    0: slugs,\n    1: setSlugs\n  } = useState([]);\n  const {\n    scanCtgs,\n    db\n  } = useStoreState(state => state);\n  const actions = useStoreActions(actions => actions);\n\n  const getMetaFromDb = async () => {\n    setLoading(true); // Check if metadata exists in local db. typeof meta<{res}:Object || undefined>\n\n    const meta = await db.collection(\"metadata\").findOne({\n      scannedUrl: url\n    });\n\n    if (meta) {\n      actions.addInfoEvent(`Metadata for ${url} successfully fetched.`);\n      setLoading(false);\n      return {\n        ok: true,\n        meta\n      };\n    } else {\n      setLoading(false);\n      return {\n        ok: false,\n        meta: {}\n      };\n    }\n  };\n\n  const getMetaFromWebsite = async () => {\n    setLoading(true);\n    let meta = {},\n        isMetaAvailable = false,\n        isMetaStored = false; // If website does not exist in local db, fetch metadata\n\n    const fetchedMeta = await slugDriver({\n      query: \"url=\" + url\n    });\n    if (fetchedMeta && fetchedMeta.metadata) isMetaAvailable = true; // Website details are fetched and metadata exists\n\n    if (isMetaAvailable) {\n      meta = _objectSpread({\n        scannedUrl: withoutCreds(url),\n        slugs: fetchedMeta.slugs\n      }, fetchedMeta.metadata);\n    }\n\n    if (isMetaAvailable) {\n      // Store website metadata and slugs to local db\n      await db.collection(\"metadata\").insert(meta, () => {\n        actions.addInfoEvent(`Metadata for ${withoutCreds(url)} successfully stored.`);\n        isMetaStored = true;\n      });\n    }\n\n    if (isMetaStored) {\n      setLoading(false);\n      return {\n        ok: true,\n        meta\n      };\n    } else {\n      setLoading(false);\n      return {\n        ok: false,\n        meta\n      };\n    }\n  };\n\n  const getMeta = async () => {\n    let data = await getMetaFromDb();\n    if (data.ok) return data.meta;\n    data = await getMetaFromWebsite();\n    if (data.ok) return data.meta;\n    return false;\n  };\n\n  const handleSlugs = async () => {\n    if (!urlRgx.test(url)) return; // setIsNew(false) Removes the default \"New DCC scan\" text\n\n    setIsNew(false);\n    const meta = await getMeta();\n\n    if (meta) {\n      actions.setMetadata(meta); // setSlugs(meta.slugs);\n      // return actions.setScanUrl(url);\n\n      return setSlugs(meta.slugs); // return actions.setScanUrl(url);\n    } else {\n      // If fetching metadata fails, reset the default \"New DCC scan\" details and remove url from state\n      setIsNew(true);\n      setUrl(\"\");\n    }\n\n    return;\n  }; // Cleanup function, resets all url data each time Modal component unmounts\n\n\n  useEffect(() => () => setIsNew(true), []);\n  return /*#__PURE__*/_jsxDEV(ModalBackground, {\n    trigger: setNewScan,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.modal,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"three columns\",\n          children: /*#__PURE__*/_jsxDEV(NewScanForm, {\n            loading: loading,\n            url: url,\n            setUrl: setUrl,\n            slugs: slugs,\n            handleSlugs: handleSlugs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WebCard, {\n          loading: loading,\n          isNew: isNew\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: scanCtgs && /*#__PURE__*/_jsxDEV(NewScanInit, {\n          url: url,\n          setUrl: setUrl,\n          setNewScan: setNewScan\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\nexport default NewScanModal;","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanModal/NewScanModal.js"],"names":["useEffect","useState","useStoreActions","useStoreState","NewScanForm","WebCard","NewScanInit","ModalBackground","css","slugDriver","urlRgx","withoutCreds","NewScanModal","isNew","setIsNew","setNewScan","loading","setLoading","url","setUrl","slugs","setSlugs","scanCtgs","db","state","actions","getMetaFromDb","meta","collection","findOne","scannedUrl","addInfoEvent","ok","getMetaFromWebsite","isMetaAvailable","isMetaStored","fetchedMeta","query","metadata","insert","getMeta","data","handleSlugs","test","setMetadata","modal"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\n\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\n\nimport css from \"./NewScanModal.module.css\";\n\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\nimport { withoutCreds } from \"../../lib/helpers/withoutCreds.js\";\n\nconst NewScanModal = ({ isNew, setIsNew, setNewScan }) => {\n  const [loading, setLoading] = useState(false);\n  const [url, setUrl] = useState(\"\");\n  const [slugs, setSlugs] = useState([]);\n\n  const { scanCtgs, db } = useStoreState(state => state);\n  const actions = useStoreActions(actions => actions);\n\n  const getMetaFromDb = async () => {\n    setLoading(true);\n    // Check if metadata exists in local db. typeof meta<{res}:Object || undefined>\n    const meta = await db.collection(\"metadata\").findOne({ scannedUrl: url });\n\n    if (meta) {\n      actions.addInfoEvent(`Metadata for ${url} successfully fetched.`);\n      setLoading(false);\n      return {\n        ok: true,\n        meta\n      };\n    } else {\n      setLoading(false);\n      return {\n        ok: false,\n        meta: {}\n      };\n    }\n  };\n\n  const getMetaFromWebsite = async () => {\n    setLoading(true);\n    let meta = {},\n      isMetaAvailable = false,\n      isMetaStored = false;\n\n    // If website does not exist in local db, fetch metadata\n    const fetchedMeta = await slugDriver({ query: \"url=\" + url });\n\n    if (fetchedMeta && fetchedMeta.metadata) isMetaAvailable = true;\n\n    // Website details are fetched and metadata exists\n    if (isMetaAvailable) {\n      meta = {\n        scannedUrl: withoutCreds(url),\n        slugs: fetchedMeta.slugs,\n        ...fetchedMeta.metadata\n      };\n    }\n\n    if (isMetaAvailable) {\n      // Store website metadata and slugs to local db\n      await db.collection(\"metadata\").insert(meta, () => {\n        actions.addInfoEvent(\n          `Metadata for ${withoutCreds(url)} successfully stored.`\n        );\n        isMetaStored = true;\n      });\n    }\n\n    if (isMetaStored) {\n      setLoading(false);\n      return {\n        ok: true,\n        meta\n      };\n    } else {\n      setLoading(false);\n      return {\n        ok: false,\n        meta\n      };\n    }\n  };\n\n  const getMeta = async () => {\n    let data = await getMetaFromDb();\n    if (data.ok) return data.meta;\n\n    data = await getMetaFromWebsite();\n    if (data.ok) return data.meta;\n\n    return false;\n  };\n\n  const handleSlugs = async () => {\n    if (!urlRgx.test(url)) return;\n\n    // setIsNew(false) Removes the default \"New DCC scan\" text\n    setIsNew(false);\n\n    const meta = await getMeta();\n\n    if (meta) {\n      actions.setMetadata(meta);\n      // setSlugs(meta.slugs);\n      // return actions.setScanUrl(url);\n      return setSlugs(meta.slugs);\n      // return actions.setScanUrl(url);\n    } else {\n      // If fetching metadata fails, reset the default \"New DCC scan\" details and remove url from state\n      setIsNew(true);\n      setUrl(\"\");\n    }\n    return;\n  };\n\n  // Cleanup function, resets all url data each time Modal component unmounts\n  useEffect(() => () => setIsNew(true), []);\n\n  return (\n    <ModalBackground trigger={setNewScan}>\n      <div className={css.modal}>\n        <div className=\"row flex\">\n          <div className=\"three columns\">\n            <NewScanForm\n              loading={loading}\n              url={url}\n              setUrl={setUrl}\n              slugs={slugs}\n              handleSlugs={handleSlugs}\n            />\n          </div>\n          <WebCard loading={loading} isNew={isNew} />\n        </div>\n        <div className=\"row\">\n          {/* Do not display START SCAN button until URL and categories are prepared */}\n          {/* {scanCtgs && <NewScanInit setNewScan={setNewScan} />} */}\n          {scanCtgs && (\n            <NewScanInit url={url} setUrl={setUrl} setNewScan={setNewScan} />\n          )}\n        </div>\n      </div>\n    </ModalBackground>\n  );\n};\n\nexport default NewScanModal;\n"]},"metadata":{},"sourceType":"module"}