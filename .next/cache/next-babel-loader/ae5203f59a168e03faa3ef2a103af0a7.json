{"ast":null,"code":"export const setScanUrl = (state, scanUrl) => {\n  state.scanUrl = scanUrl;\n};\nexport const setScanCtgs = (state, scanCtgs) => {\n  state.scanCtgs = scanCtgs;\n};\nexport const setMetadata = (state, meta) => {\n  state.metadata = meta;\n};\nexport const reSetScanUrl = state => {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = {};\n  state.errorEvents = [];\n};\nexport const addInfoEvent = (state, event) => {\n  state.infoEvents.push(event);\n};\nexport const addDataEvent = (state, {\n  url,\n  data\n}) => {\n  const scanData = state.dataEvents[url] || [];\n  state.dataEvents[url] = [...scanData, data];\n};\nexport const addErrorEvent = (state, event) => {\n  state.errorEvents.push(event);\n};\nexport const setScanCompleted = (state, check) => {\n  state.scanCompleted = check;\n}; // Check switch for the entire process from starting scan to the storing of data in db:\n\nexport const setProcessInProgress = (state, check) => {\n  state.processInProgress = check;\n};\nexport const startStream = async (actions, query) => {\n  const es = new EventSource(\"/api/stream?\" + query, {\n    withCredentials: true\n  });\n\n  es.onopen = () => {\n    actions.addInfoEvent(\"Connection with server established.\");\n  };\n\n  es.addEventListener(\"info\", ({\n    data\n  }) => {\n    actions.addInfoEvent(JSON.parse(data));\n  });\n  es.addEventListener(\"data\", ({\n    lastEventId: url,\n    data\n  }) => {\n    actions.addDataEvent({\n      url,\n      data: JSON.parse(data)\n    });\n  });\n  es.addEventListener(\"close\", e => {\n    actions.addInfoEvent(\"Connection with server closed.\");\n    actions.addInfoEvent(\"Processing scan data...\");\n    actions.setScanCompleted(true);\n    es.close();\n  });\n  es.addEventListener(\"servererror\", ({\n    lastEventId: url,\n    data\n  }) => {\n    console.log(\"Servererror event lastEventId\", url);\n    console.log(\"Servererror event data\", data);\n    actions.addErrorEvent(\"An error occurred: \" + data);\n    actions.setScanCompleted(true);\n    actions.setProcessInProgress(false); // In case of error, close the process\n\n    es.close();\n  });\n\n  es.onerror = err => {\n    console.warn(\"Actual error event\", err);\n    actions.addErrorEvent(\"An es.onerror occurred\");\n    actions.setScanCompleted(true);\n    actions.setProcessInProgress(false); // In case of error, close the process\n\n    es.close();\n  };\n};","map":null,"metadata":{},"sourceType":"module"}