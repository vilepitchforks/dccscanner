{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\nimport css from \"./NewScanModal.module.css\";\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\nimport { withoutCreds } from \"../../lib/helpers/withoutCreds.js\";\n\nvar NewScanModal = function NewScanModal(_ref) {\n  var isNew = _ref.isNew,\n      setIsNew = _ref.setIsNew,\n      setNewScan = _ref.setNewScan;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      url = _useState2[0],\n      setUrl = _useState2[1];\n\n  var _useState3 = useState([]),\n      slugs = _useState3[0],\n      setSlugs = _useState3[1];\n\n  var _useStoreState = useStoreState(function (state) {\n    return state;\n  }),\n      scanCtgs = _useStoreState.scanCtgs,\n      db = _useStoreState.db;\n\n  var actions = useStoreActions(function (actions) {\n    return actions;\n  });\n\n  var getMetaFromDb = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var meta;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true); // Check if metadata exists in local db. typeof meta<{res}:Object || undefined>\n\n              _context.next = 3;\n              return db.collection(\"metadata\").findOne({\n                scannedUrl: url\n              });\n\n            case 3:\n              meta = _context.sent;\n\n              if (!meta) {\n                _context.next = 10;\n                break;\n              }\n\n              actions.addInfoEvent(\"Metadata for \".concat(url, \" successfully fetched.\"));\n              setLoading(false);\n              return _context.abrupt(\"return\", {\n                ok: true,\n                meta: meta\n              });\n\n            case 10:\n              setLoading(false);\n              return _context.abrupt(\"return\", {\n                ok: false,\n                meta: {}\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getMetaFromDb() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getMetaFromWebsite = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var meta, isMetaAvailable, isMetaStored, fetchedMeta;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              meta = {}, isMetaAvailable = false, isMetaStored = false; // If website does not exist in local db, fetch metadata\n\n              _context2.next = 4;\n              return slugDriver({\n                query: \"url=\" + url\n              });\n\n            case 4:\n              fetchedMeta = _context2.sent;\n              if (fetchedMeta && fetchedMeta.metadata) isMetaAvailable = true; // Website details are fetched and metadata exists\n\n              if (isMetaAvailable) {\n                meta = _objectSpread({\n                  scannedUrl: withoutCreds(url),\n                  slugs: fetchedMeta.slugs\n                }, fetchedMeta.metadata);\n              }\n\n              if (!isMetaAvailable) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.next = 10;\n              return db.collection(\"metadata\").insert(meta, function () {\n                actions.addInfoEvent(\"Metadata for \".concat(withoutCreds(url), \" successfully stored.\"));\n                isMetaStored = true;\n              });\n\n            case 10:\n              if (!isMetaStored) {\n                _context2.next = 15;\n                break;\n              }\n\n              setLoading(false);\n              return _context2.abrupt(\"return\", {\n                ok: true,\n                meta: meta\n              });\n\n            case 15:\n              setLoading(false);\n              return _context2.abrupt(\"return\", {\n                ok: false,\n                meta: meta\n              });\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getMetaFromWebsite() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var getMeta = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getMetaFromDb();\n\n            case 2:\n              data = _context3.sent;\n\n              if (!data.ok) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", data.meta);\n\n            case 5:\n              _context3.next = 7;\n              return getMetaFromWebsite();\n\n            case 7:\n              data = _context3.sent;\n\n              if (!data.ok) {\n                _context3.next = 10;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", data.meta);\n\n            case 10:\n              return _context3.abrupt(\"return\", false);\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getMeta() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleSlugs = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var meta;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (urlRgx.test(url)) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 2:\n              // setIsNew(false) Removes the default \"New DCC scan\" text\n              setIsNew(false);\n              _context4.next = 5;\n              return getMeta();\n\n            case 5:\n              meta = _context4.sent;\n\n              if (!meta) {\n                _context4.next = 11;\n                break;\n              }\n\n              actions.setMetadata(meta); // setSlugs(meta.slugs);\n              // return actions.setScanUrl(url);\n\n              return _context4.abrupt(\"return\", setSlugs(meta.slugs));\n\n            case 11:\n              // If fetching metadata fails, reset the default \"New DCC scan\" details and remove url from state\n              setIsNew(true);\n              setUrl(\"\");\n\n            case 13:\n              return _context4.abrupt(\"return\");\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleSlugs() {\n      return _ref5.apply(this, arguments);\n    };\n  }(); // Cleanup function, resets all url data each time Modal component unmounts\n\n\n  useEffect(function () {\n    return function () {\n      return setIsNew(true);\n    };\n  }, []);\n  return /*#__PURE__*/_jsx(ModalBackground, {\n    trigger: setNewScan,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: css.modal,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"row flex\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"three columns\",\n          children: /*#__PURE__*/_jsx(NewScanForm, {\n            loading: loading,\n            url: url,\n            setUrl: setUrl,\n            slugs: slugs,\n            handleSlugs: handleSlugs\n          })\n        }), /*#__PURE__*/_jsx(WebCard, {\n          loading: loading,\n          isNew: isNew\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"row\",\n        children: scanCtgs && /*#__PURE__*/_jsx(NewScanInit, {\n          url: url,\n          setUrl: setUrl,\n          setNewScan: setNewScan\n        })\n      })]\n    })\n  });\n};\n\nexport default NewScanModal;","map":null,"metadata":{},"sourceType":"module"}