{"ast":null,"code":"export const chunkify = array => {\n  return Array.from({\n    length: Math.ceil(array.length / 4)\n  }, (_, i) => {\n    const start = i * 4;\n    return array.slice(start, start + 4);\n  });\n};\nexport const createTableData = dataRaw => {\n  // Creates 15X36 empty spreadsheet as a default placeholder\n  const numberOfColumns = dataRaw.length ? Object.keys(dataRaw[0]).length : 15;\n  const row = Array.from({\n    length: numberOfColumns\n  }, (_, i) => ({\n    value: \" \"\n  }));\n  const emptyTable = Array.from({\n    length: 36\n  }, (_, i) => row);\n  if (!dataRaw.length) return emptyTable; // dataRaw format:\n  // [\n  //   {url: \"url\", timestamp: \"timestamp\", scannedUrl: \"scannedUrl\", locale: \"locale\", productId: \"productId\", …},\n  //   {url: \"url\", timestamp: \"timestamp\", scannedUrl: \"scannedUrl\", locale: \"locale\", productId: \"productId\", …}\n  // ]\n  // Format needed for react-datasheet:\n  // [\n  //   [{value:  1}, {value:  3}],\n  //   [{value:  2}, {value:  4}]\n  // ]\n\n  const title = Object.keys(dataRaw[0]).map(titleKey => ({\n    value: titleKey\n  }));\n  const bodyRaw = dataRaw.map(row => Object.values(row));\n  const body = bodyRaw.map(row => row.map(cell => ({\n    value: Array.isArray(cell) ? JSON.stringify(cell) : cell\n  })));\n  return [title, ...body, ...emptyTable];\n};","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/lib/helpers/arrayHelpers.js"],"names":["chunkify","array","Array","from","length","Math","ceil","_","i","start","slice","createTableData","dataRaw","numberOfColumns","Object","keys","row","value","emptyTable","title","map","titleKey","bodyRaw","values","body","cell","isArray","JSON","stringify"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAGC,KAAK,IAAI;AAC/B,SAAOC,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAEC,IAAI,CAACC,IAAL,CAAUL,KAAK,CAACG,MAAN,GAAe,CAAzB;AAAV,GAAX,EAAoD,CAACG,CAAD,EAAIC,CAAJ,KAAU;AACnE,UAAMC,KAAK,GAAGD,CAAC,GAAG,CAAlB;AACA,WAAOP,KAAK,CAACS,KAAN,CAAYD,KAAZ,EAAmBA,KAAK,GAAG,CAA3B,CAAP;AACD,GAHM,CAAP;AAID,CALM;AAOP,OAAO,MAAME,eAAe,GAAGC,OAAO,IAAI;AACxC;AACA,QAAMC,eAAe,GAAGD,OAAO,CAACR,MAAR,GAAiBU,MAAM,CAACC,IAAP,CAAYH,OAAO,CAAC,CAAD,CAAnB,EAAwBR,MAAzC,GAAkD,EAA1E;AACA,QAAMY,GAAG,GAAGd,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAES;AAAV,GAAX,EAAwC,CAACN,CAAD,EAAIC,CAAJ,MAAW;AAC7DS,IAAAA,KAAK,EAAE;AADsD,GAAX,CAAxC,CAAZ;AAGA,QAAMC,UAAU,GAAGhB,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAX,EAA2B,CAACG,CAAD,EAAIC,CAAJ,KAAUQ,GAArC,CAAnB;AACA,MAAI,CAACJ,OAAO,CAACR,MAAb,EAAqB,OAAOc,UAAP,CAPmB,CAQxC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,QAAMC,KAAK,GAAGL,MAAM,CAACC,IAAP,CAAYH,OAAO,CAAC,CAAD,CAAnB,EAAwBQ,GAAxB,CAA4BC,QAAQ,KAAK;AAAEJ,IAAAA,KAAK,EAAEI;AAAT,GAAL,CAApC,CAAd;AACA,QAAMC,OAAO,GAAGV,OAAO,CAACQ,GAAR,CAAYJ,GAAG,IAAIF,MAAM,CAACS,MAAP,CAAcP,GAAd,CAAnB,CAAhB;AACA,QAAMQ,IAAI,GAAGF,OAAO,CAACF,GAAR,CAAYJ,GAAG,IAC1BA,GAAG,CAACI,GAAJ,CAAQK,IAAI,KAAK;AACfR,IAAAA,KAAK,EAAEf,KAAK,CAACwB,OAAN,CAAcD,IAAd,IAAsBE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAtB,GAA6CA;AADrC,GAAL,CAAZ,CADW,CAAb;AAMA,SAAO,CAACN,KAAD,EAAQ,GAAGK,IAAX,EAAiB,GAAGN,UAApB,CAAP;AACD,CA5BM","sourcesContent":["export const chunkify = array => {\n  return Array.from({ length: Math.ceil(array.length / 4) }, (_, i) => {\n    const start = i * 4;\n    return array.slice(start, start + 4);\n  });\n};\n\nexport const createTableData = dataRaw => {\n  // Creates 15X36 empty spreadsheet as a default placeholder\n  const numberOfColumns = dataRaw.length ? Object.keys(dataRaw[0]).length : 15;\n  const row = Array.from({ length: numberOfColumns }, (_, i) => ({\n    value: \" \"\n  }));\n  const emptyTable = Array.from({ length: 36 }, (_, i) => row);\n  if (!dataRaw.length) return emptyTable;\n  // dataRaw format:\n  // [\n  //   {url: \"url\", timestamp: \"timestamp\", scannedUrl: \"scannedUrl\", locale: \"locale\", productId: \"productId\", …},\n  //   {url: \"url\", timestamp: \"timestamp\", scannedUrl: \"scannedUrl\", locale: \"locale\", productId: \"productId\", …}\n  // ]\n\n  // Format needed for react-datasheet:\n  // [\n  //   [{value:  1}, {value:  3}],\n  //   [{value:  2}, {value:  4}]\n  // ]\n  const title = Object.keys(dataRaw[0]).map(titleKey => ({ value: titleKey }));\n  const bodyRaw = dataRaw.map(row => Object.values(row));\n  const body = bodyRaw.map(row =>\n    row.map(cell => ({\n      value: Array.isArray(cell) ? JSON.stringify(cell) : cell\n    }))\n  );\n\n  return [title, ...body, ...emptyTable];\n};\n"]},"metadata":{},"sourceType":"module"}