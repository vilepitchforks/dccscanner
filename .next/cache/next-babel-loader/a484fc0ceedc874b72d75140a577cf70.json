{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nexport var setScanUrl = function setScanUrl(state, scanUrl) {\n  state.scanUrl = scanUrl;\n};\nexport var setScanCtgs = function setScanCtgs(state, scanCtgs) {\n  state.scanCtgs = scanCtgs;\n};\nexport var setMetadata = function setMetadata(state, meta) {\n  state.metadata = meta;\n};\nexport var reSetScanUrl = function reSetScanUrl(state) {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = {};\n  state.errorEvents = [];\n};\nexport var addInfoEvent = function addInfoEvent(state, event) {\n  state.infoEvents.push(event);\n};\nexport var addDataEvent = function addDataEvent(state, _ref) {\n  var url = _ref.url,\n      data = _ref.data;\n  var scanData = state.dataEvents[url] || [];\n  state.dataEvents[url] = [].concat(_toConsumableArray(scanData), [data]);\n};\nexport var addErrorEvent = function addErrorEvent(state, event) {\n  state.errorEvents.push(event);\n};\nexport var setScanCompleted = function setScanCompleted(state, check) {\n  state.scanCompleted = check;\n}; // Check switch for the entire process from starting scan to the storing of data in db:\n\nexport var setProcessInProgress = function setProcessInProgress(state, check) {\n  state.processInProgress = check;\n};\nexport var startStream = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(actions, query) {\n    var es;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            es = new EventSource(\"/api/stream?\" + query, {\n              withCredentials: true\n            });\n\n            es.onopen = function () {\n              actions.addInfoEvent(\"Connection with server established.\");\n            };\n\n            es.addEventListener(\"info\", function (_ref3) {\n              var data = _ref3.data;\n              actions.addInfoEvent(JSON.parse(data));\n            });\n            es.addEventListener(\"data\", function (_ref4) {\n              var url = _ref4.lastEventId,\n                  data = _ref4.data;\n              actions.addDataEvent({\n                url: url,\n                data: JSON.parse(data)\n              });\n            });\n            es.addEventListener(\"close\", function (e) {\n              actions.addInfoEvent(\"Connection with server closed.\");\n              actions.addInfoEvent(\"Processing scan data...\");\n              actions.setScanCompleted(true);\n              es.close();\n            });\n            es.addEventListener(\"servererror\", function (_ref5) {\n              var url = _ref5.lastEventId,\n                  data = _ref5.data;\n              console.log(\"Servererror event lastEventId\", url);\n              console.log(\"Servererror event data\", data);\n              actions.addErrorEvent(\"An error occurred: \" + data);\n              actions.setScanCompleted(true);\n              es.close();\n            });\n\n            es.onerror = function (err) {\n              console.warn(\"Actual error event\", err);\n              actions.addErrorEvent(\"An es.onerror occurred\");\n              actions.setScanCompleted(true);\n              es.close();\n            };\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function startStream(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/lib/state/eventHandlers/eventHandlers.js"],"names":["setScanUrl","state","scanUrl","setScanCtgs","scanCtgs","setMetadata","meta","metadata","reSetScanUrl","infoEvents","dataEvents","errorEvents","addInfoEvent","event","push","addDataEvent","url","data","scanData","addErrorEvent","setScanCompleted","check","scanCompleted","setProcessInProgress","processInProgress","startStream","actions","query","es","EventSource","withCredentials","onopen","addEventListener","JSON","parse","lastEventId","e","close","console","log","onerror","err","warn"],"mappings":"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","sourcesContent":["export const setScanUrl = (state, scanUrl) => {\n  state.scanUrl = scanUrl;\n};\n\nexport const setScanCtgs = (state, scanCtgs) => {\n  state.scanCtgs = scanCtgs;\n};\n\nexport const setMetadata = (state, meta) => {\n  state.metadata = meta;\n};\n\nexport const reSetScanUrl = state => {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = {};\n  state.errorEvents = [];\n};\n\nexport const addInfoEvent = (state, event) => {\n  state.infoEvents.push(event);\n};\n\nexport const addDataEvent = (state, { url, data }) => {\n  const scanData = state.dataEvents[url] || [];\n  state.dataEvents[url] = [...scanData, data];\n};\n\nexport const addErrorEvent = (state, event) => {\n  state.errorEvents.push(event);\n};\n\nexport const setScanCompleted = (state, check) => {\n  state.scanCompleted = check;\n};\n// Check switch for the entire process from starting scan to the storing of data in db:\nexport const setProcessInProgress = (state, check) => {\n  state.processInProgress = check;\n};\n\nexport const startStream = async (actions, query) => {\n  const es = new EventSource(\"/api/stream?\" + query, {\n    withCredentials: true\n  });\n\n  es.onopen = () => {\n    actions.addInfoEvent(\"Connection with server established.\");\n  };\n  es.addEventListener(\"info\", ({ data }) => {\n    actions.addInfoEvent(JSON.parse(data));\n  });\n  es.addEventListener(\"data\", ({ lastEventId: url, data }) => {\n    actions.addDataEvent({ url, data: JSON.parse(data) });\n  });\n  es.addEventListener(\"close\", e => {\n    actions.addInfoEvent(\"Connection with server closed.\");\n    actions.addInfoEvent(\"Processing scan data...\");\n    actions.setScanCompleted(true);\n    es.close();\n  });\n  es.addEventListener(\"servererror\", ({ lastEventId: url, data }) => {\n    console.log(\"Servererror event lastEventId\", url);\n    console.log(\"Servererror event data\", data);\n    actions.addErrorEvent(\"An error occurred: \" + data);\n    actions.setScanCompleted(true);\n    es.close();\n  });\n  es.onerror = err => {\n    console.warn(\"Actual error event\", err);\n    actions.addErrorEvent(\"An es.onerror occurred\");\n    actions.setScanCompleted(true);\n    es.close();\n  };\n};\n"]},"metadata":{},"sourceType":"module"}