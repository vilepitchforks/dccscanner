{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Model } from \"../../helpers/processDb.js\";\nexport var setScanUrl = function setScanUrl(state, scanUrl) {\n  state.scanUrl = scanUrl;\n};\nexport var setScanCtgs = function setScanCtgs(state, scanCtgs) {\n  state.scanCtgs = scanCtgs;\n};\nexport var setScanInProgress = function setScanInProgress(state, check) {\n  state.scanInProgress = check;\n};\nexport var setMetadata = function setMetadata(state, meta) {\n  state.metadata = meta;\n};\nexport var reSetScanUrl = function reSetScanUrl(state) {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = [];\n  state.errorEvents = [];\n};\nexport var addInfoEvent = function addInfoEvent(state, event) {\n  state.infoEvents.push(event);\n};\nexport var addDataEvent = function addDataEvent(state, _ref) {\n  var url = _ref.url,\n      data = _ref.data,\n      timestamp = _ref.timestamp;\n  // Store valid DCC objects, with more than just url, scannedUrl and timestamp.\n  if (Object.keys(data).length > 3) state.dataEvents.push(_objectSpread({\n    url: url,\n    timestamp: timestamp\n  }, data));\n};\nexport var addErrorEvent = function addErrorEvent(state, event) {\n  state.errorEvents.push(event);\n};\nexport var startStream = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(actions, query) {\n    var es, timestamp;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            es = new EventSource(\"/api/stream?\" + query, {\n              withCredentials: true\n            });\n            timestamp = new Date().getTime();\n\n            es.onopen = function () {\n              actions.addInfoEvent(\"Connection with server established.\");\n              actions.setScanInProgress(true);\n            };\n\n            es.addEventListener(\"info\", function (_ref3) {\n              var data = _ref3.data;\n              actions.addInfoEvent(JSON.parse(data));\n            });\n            es.addEventListener(\"data\", function (_ref4) {\n              var url = _ref4.lastEventId,\n                  data = _ref4.data;\n              actions.addDataEvent({\n                url: url,\n                data: JSON.parse(data),\n                timestamp: timestamp\n              });\n            });\n            es.addEventListener(\"close\", function (e) {\n              actions.addInfoEvent(\"Connection with server closed.\");\n              actions.addInfoEvent(\"Processing scan data...\");\n              actions.setScanInProgress(false);\n              es.close();\n            });\n            es.addEventListener(\"servererror\", function (_ref5) {\n              var url = _ref5.lastEventId,\n                  data = _ref5.data;\n              console.log(\"Servererror event lastEventId\", url);\n              console.log(\"Servererror event data\", data);\n              actions.addErrorEvent(\"An error occurred: \" + data);\n              actions.setScanInProgress(false);\n              es.close();\n            });\n\n            es.onerror = function (err) {\n              console.warn(\"Actual error event\", err);\n              actions.addErrorEvent(\"An es.onerror occurred\");\n              actions.setScanInProgress(false);\n              es.close();\n            };\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function startStream(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var setDb = function setDb(state, db) {\n  state.db = db;\n};\nexport var initDb = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(actions) {\n    var db;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            db = new Model();\n            actions.setDb(db);\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function initDb(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/lib/state/eventHandlers/eventHandlers.js"],"names":["Model","setScanUrl","state","scanUrl","setScanCtgs","scanCtgs","setScanInProgress","check","scanInProgress","setMetadata","meta","metadata","reSetScanUrl","infoEvents","dataEvents","errorEvents","addInfoEvent","event","push","addDataEvent","url","data","timestamp","Object","keys","length","addErrorEvent","startStream","actions","query","es","EventSource","withCredentials","Date","getTime","onopen","addEventListener","JSON","parse","lastEventId","e","close","console","log","onerror","err","warn","setDb","db","initDb"],"mappings":"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","sourcesContent":["import { Model } from \"../../helpers/processDb.js\";\n\nexport const setScanUrl = (state, scanUrl) => {\n  state.scanUrl = scanUrl;\n};\n\nexport const setScanCtgs = (state, scanCtgs) => {\n  state.scanCtgs = scanCtgs;\n};\n\nexport const setScanInProgress = (state, check) => {\n  state.scanInProgress = check;\n};\n\nexport const setMetadata = (state, meta) => {\n  state.metadata = meta;\n};\n\nexport const reSetScanUrl = state => {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = [];\n  state.errorEvents = [];\n};\n\nexport const addInfoEvent = (state, event) => {\n  state.infoEvents.push(event);\n};\n\nexport const addDataEvent = (state, { url, data, timestamp }) => {\n  // Store valid DCC objects, with more than just url, scannedUrl and timestamp.\n  if (Object.keys(data).length > 3)\n    state.dataEvents.push({ url, timestamp, ...data });\n};\n\nexport const addErrorEvent = (state, event) => {\n  state.errorEvents.push(event);\n};\n\nexport const startStream = async (actions, query) => {\n  const es = new EventSource(\"/api/stream?\" + query, {\n    withCredentials: true\n  });\n\n  const timestamp = new Date().getTime();\n\n  es.onopen = () => {\n    actions.addInfoEvent(\"Connection with server established.\");\n    actions.setScanInProgress(true);\n  };\n  es.addEventListener(\"info\", ({ data }) => {\n    actions.addInfoEvent(JSON.parse(data));\n  });\n  es.addEventListener(\"data\", ({ lastEventId: url, data }) => {\n    actions.addDataEvent({ url, data: JSON.parse(data), timestamp });\n  });\n  es.addEventListener(\"close\", e => {\n    actions.addInfoEvent(\"Connection with server closed.\");\n    actions.addInfoEvent(\"Processing scan data...\");\n    actions.setScanInProgress(false);\n    es.close();\n  });\n  es.addEventListener(\"servererror\", ({ lastEventId: url, data }) => {\n    console.log(\"Servererror event lastEventId\", url);\n    console.log(\"Servererror event data\", data);\n    actions.addErrorEvent(\"An error occurred: \" + data);\n    actions.setScanInProgress(false);\n    es.close();\n  });\n  es.onerror = err => {\n    console.warn(\"Actual error event\", err);\n    actions.addErrorEvent(\"An es.onerror occurred\");\n    actions.setScanInProgress(false);\n    es.close();\n  };\n};\n\nexport const setDb = (state, db) => {\n  state.db = db;\n};\n\nexport const initDb = async actions => {\n  const db = new Model();\n  actions.setDb(db);\n};\n"]},"metadata":{},"sourceType":"module"}