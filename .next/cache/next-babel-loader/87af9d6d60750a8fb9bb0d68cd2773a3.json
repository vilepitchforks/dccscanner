{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Model } from \"../../helpers/processDb.js\";\nexport var setScanUrl = function setScanUrl(state, scanUrl) {\n  state.scanUrl = scanUrl;\n};\nexport var setScanCtgs = function setScanCtgs(state, scanCtgs) {\n  state.scanCtgs = scanCtgs;\n};\nexport var setScanInProgress = function setScanInProgress(state, check) {\n  state.scanInProgress = check;\n};\nexport var setMetadata = function setMetadata(state, meta) {\n  state.metadata = meta;\n};\nexport var reSetScanUrl = function reSetScanUrl(state) {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = [];\n  state.errorEvents = [];\n};\nexport var addInfoEvent = function addInfoEvent(state, event) {\n  state.infoEvents.push(event);\n};\nexport var addDataEvent = function addDataEvent(state, _ref) {\n  var url = _ref.url,\n      data = _ref.data,\n      timestamp = _ref.timestamp;\n  // Store valid DCC objects, with more than just url, scannedUrl and timestamp.\n  if (Object.keys(data).length > 3) state.dataEvents.push(_objectSpread({\n    url: url,\n    timestamp: timestamp\n  }, data));\n};\nexport var addErrorEvent = function addErrorEvent(state, event) {\n  state.errorEvents.push(event);\n};\nexport var startStream = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(actions, query) {\n    var es, timestamp;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            es = new EventSource(\"/api/stream?\" + query, {\n              withCredentials: true\n            });\n            timestamp = new Date().getTime();\n\n            es.onopen = function () {\n              actions.addInfoEvent(\"Connection with server established.\");\n              actions.setScanInProgress(true);\n            };\n\n            es.addEventListener(\"info\", function (_ref3) {\n              var data = _ref3.data;\n              actions.addInfoEvent(JSON.parse(data));\n            });\n            es.addEventListener(\"data\", function (_ref4) {\n              var url = _ref4.lastEventId,\n                  data = _ref4.data;\n              actions.addDataEvent({\n                url: url,\n                data: JSON.parse(data),\n                timestamp: timestamp\n              });\n            });\n            es.addEventListener(\"close\", function (e) {\n              actions.addInfoEvent(\"Connection with server closed.\");\n              actions.addInfoEvent(\"Processing scan data...\");\n              actions.setScanInProgress(false);\n              es.close();\n            });\n            es.addEventListener(\"servererror\", function (_ref5) {\n              var url = _ref5.lastEventId,\n                  data = _ref5.data;\n              console.log(\"Servererror event lastEventId\", url);\n              console.log(\"Servererror event data\", data);\n              actions.addErrorEvent(\"An error occurred: \" + data);\n              actions.setScanInProgress(false);\n              es.close();\n            });\n\n            es.onerror = function (err) {\n              console.warn(\"Actual error event\", err);\n              actions.addErrorEvent(\"An es.onerror occurred\");\n              actions.setScanInProgress(false);\n              es.close();\n            };\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function startStream(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var setDb = function setDb(state, db) {\n  state.db = db;\n};\nexport var initDb = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(actions) {\n    var db;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            db = new Model();\n            actions.setDb(db);\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function initDb(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}