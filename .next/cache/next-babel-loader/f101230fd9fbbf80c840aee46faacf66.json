{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\nimport css from \"./NewScanModal.module.css\";\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { getSingleMeta, makeStoreData } from \"../../lib/helpers/processDb.js\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\n\nconst NewScanModal = ({\n  isNew,\n  setIsNew,\n  setNewScan\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: url,\n    1: setUrl\n  } = useState(\"\");\n  const {\n    0: slugs,\n    1: setSlugs\n  } = useState([]);\n  const {\n    scanCtgs\n  } = useStoreState(state => state);\n  const actions = useStoreActions(actions => actions);\n\n  const handleSlugs = async () => {\n    setUrl(\"\");\n    if (!urlRgx.test(url)) return; // Remove \"New DCC scan\" title and set loading animation\n\n    setIsNew(false);\n    setLoading(true);\n    let website; // Check if metadata exists in local db\n\n    const {\n      ok,\n      data\n    } = await getSingleMeta(url);\n\n    if (ok && data) {\n      actions.addInfoEvent(`Metadata for ${url} successfully fetched.`);\n      actions.setMetadata(data);\n      setSlugs(data.slugs);\n    } else {\n      // If website does not exist in local db, fetch metadata\n      website = await slugDriver({\n        query: \"url=\" + url\n      }); // Store website metadata and slugs to local db\n\n      const storeMetaData = website && makeStoreData(url, actions, true);\n      website && (await storeMetaData(_objectSpread(_objectSpread({}, website.metadata), {}, {\n        slugs: website.slugs\n      })));\n      website && website.metadata && actions.setMetadata(website.metadata);\n      website && setSlugs(website.slugs);\n      website && setLoading(false);\n    }\n\n    actions.setScanUrl(url); // In case of errors while fetching metadata, reset the loading screen\n\n    if (!website) {\n      setIsNew(true);\n      setLoading(false);\n    }\n  }; // Cleanup function, resets all url data each tome Modal component unmounts\n\n\n  useEffect(() => () => setIsNew(true), []);\n  return /*#__PURE__*/_jsx(ModalBackground, {\n    trigger: setNewScan,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: css.modal,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"row flex\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"three columns\",\n          children: /*#__PURE__*/_jsx(NewScanForm, {\n            url: url,\n            setUrl: setUrl,\n            slugs: slugs,\n            handleSlugs: handleSlugs\n          })\n        }), /*#__PURE__*/_jsx(WebCard, {\n          loading: loading,\n          isNew: isNew\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"row\",\n        children: scanCtgs && /*#__PURE__*/_jsx(NewScanInit, {\n          setNewScan: setNewScan\n        })\n      })]\n    })\n  });\n};\n\nexport default NewScanModal;","map":null,"metadata":{},"sourceType":"module"}