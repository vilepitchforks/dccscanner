{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanModal/NewScanModal.js\";\nimport { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport { makeStoreData } from \"../../lib/helpers/processDb.js\";\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\nimport css from \"./NewScanModal.module.css\";\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\n\nconst NewScanModal = ({\n  isNew,\n  setIsNew,\n  setNewScan\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: url,\n    1: setUrl\n  } = useState(\"\");\n  const {\n    0: slugs,\n    1: setSlugs\n  } = useState([]);\n  const {\n    scanCtgs\n  } = useStoreState(state => state);\n  const actions = useStoreActions(actions => actions);\n\n  const handleSlugs = async () => {\n    setUrl(\"\");\n    let website;\n\n    if (urlRgx.test(url)) {\n      setIsNew(false);\n      setLoading(true);\n      website = await slugDriver({\n        query: \"url=\" + url\n      });\n      actions.setScanUrl(url); // Store website metadata to local db\n\n      const storeMetaData = makeStoreData(url, actions, true);\n      website && (await storeMetaData(website.metadata));\n    }\n\n    website && actions.setMetadata(website.metadata);\n    website && setSlugs(website.slugs);\n    website && setLoading(false); // In case of errors while fetching metadata, reset the loading screen\n\n    if (!website) {\n      setIsNew(true);\n      setLoading(false);\n    }\n  }; // Cleanup function, resets all url data each tome Modal component unmounts\n\n\n  useEffect(() => () => setIsNew(true), []);\n  return /*#__PURE__*/_jsxDEV(ModalBackground, {\n    trigger: setNewScan,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.modal,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"three columns\",\n          children: /*#__PURE__*/_jsxDEV(NewScanForm, {\n            url: url,\n            setUrl: setUrl,\n            slugs: slugs,\n            handleSlugs: handleSlugs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(WebCard, {\n          loading: loading,\n          isNew: isNew\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: scanCtgs && /*#__PURE__*/_jsxDEV(NewScanInit, {\n          setNewScan: setNewScan\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\nexport default NewScanModal;","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanModal/NewScanModal.js"],"names":["useEffect","useState","useStoreActions","useStoreState","makeStoreData","NewScanForm","WebCard","NewScanInit","ModalBackground","css","slugDriver","urlRgx","NewScanModal","isNew","setIsNew","setNewScan","loading","setLoading","url","setUrl","slugs","setSlugs","scanCtgs","state","actions","handleSlugs","website","test","query","setScanUrl","storeMetaData","metadata","setMetadata","modal"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\n\nimport { makeStoreData } from \"../../lib/helpers/processDb.js\";\n\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\n\nimport css from \"./NewScanModal.module.css\";\n\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\n\nconst NewScanModal = ({ isNew, setIsNew, setNewScan }) => {\n  const [loading, setLoading] = useState(false);\n  const [url, setUrl] = useState(\"\");\n  const [slugs, setSlugs] = useState([]);\n\n  const { scanCtgs } = useStoreState(state => state);\n  const actions = useStoreActions(actions => actions);\n\n  const handleSlugs = async () => {\n    setUrl(\"\");\n\n    let website;\n    if (urlRgx.test(url)) {\n      setIsNew(false);\n      setLoading(true);\n      website = await slugDriver({ query: \"url=\" + url });\n      actions.setScanUrl(url);\n\n      // Store website metadata to local db\n      const storeMetaData = makeStoreData(url, actions, true);\n      website && (await storeMetaData(website.metadata));\n    }\n\n    website && actions.setMetadata(website.metadata);\n    website && setSlugs(website.slugs);\n    website && setLoading(false);\n\n    // In case of errors while fetching metadata, reset the loading screen\n    if (!website) {\n      setIsNew(true);\n      setLoading(false);\n    }\n  };\n\n  // Cleanup function, resets all url data each tome Modal component unmounts\n  useEffect(() => () => setIsNew(true), []);\n\n  return (\n    <ModalBackground trigger={setNewScan}>\n      <div className={css.modal}>\n        <div className=\"row flex\">\n          <div className=\"three columns\">\n            <NewScanForm\n              url={url}\n              setUrl={setUrl}\n              slugs={slugs}\n              handleSlugs={handleSlugs}\n            />\n          </div>\n          <WebCard loading={loading} isNew={isNew} />\n        </div>\n        <div className=\"row\">\n          {/* Do not display START SCAN button until URL and categories are prepared */}\n          {scanCtgs && <NewScanInit setNewScan={setNewScan} />}\n        </div>\n      </div>\n    </ModalBackground>\n  );\n};\n\nexport default NewScanModal;\n"]},"metadata":{},"sourceType":"module"}