{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/Scans/Scans.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useStoreState } from \"easy-peasy\";\nimport css from \"./Scans.module.css\";\nimport ScanThumb from \"../ScanThumb/ScanThumb.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground\";\nimport { getScannedMeta } from \"../../lib/helpers/processDb\";\nimport { chunkify } from \"../../lib/helpers/handleArr\";\nimport ScanData from \"../ScanData/ScanData\";\n\nvar Scans = function Scans() {\n  _s();\n\n  var _useState = useState([]),\n      metaArray = _useState[0],\n      setMetaArray = _useState[1];\n\n  var _useState2 = useState(false),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      dbName = _useState3[0],\n      setDbName = _useState3[1];\n\n  var _useStoreState = useStoreState(function (state) {\n    return state;\n  }),\n      metadata = _useStoreState.metadata;\n\n  var scanRows = chunkify(metaArray);\n  useEffect(function () {\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var m;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getScannedMeta();\n\n            case 2:\n              m = _context.sent;\n              m.ok && setMetaArray(m.meta);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))(); // Re-fetch meta from local db after each new website scan\n\n  }, [metadata]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [scanRows.map(function (row, i) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css[\"scans-row\"] + \" row\",\n        children: row.map(function (thumbnail, i) {\n          return /*#__PURE__*/_jsxDEV(ScanThumb, {\n            thumbnail: thumbnail,\n            setShowModal: setShowModal,\n            setDbName: setDbName\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, _this);\n        })\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, _this);\n    }), showModal && /*#__PURE__*/_jsxDEV(ModalBackground, {\n      trigger: setShowModal,\n      children: /*#__PURE__*/_jsxDEV(ScanData, {\n        dbName: dbName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Scans, \"JyEy2AuTy49djGa1CdJjx9V4B3A=\", false, function () {\n  return [useStoreState];\n});\n\n_c = Scans;\nexport default Scans;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scans\");","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/Scans/Scans.js"],"names":["useEffect","useState","useStoreState","css","ScanThumb","ModalBackground","getScannedMeta","chunkify","ScanData","Scans","metaArray","setMetaArray","showModal","setShowModal","dbName","setDbName","state","metadata","scanRows","m","ok","meta","map","row","i","thumbnail"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AAEA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,OAAOC,QAAP,MAAqB,sBAArB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAA;;AAAA,kBACgBR,QAAQ,CAAC,EAAD,CADxB;AAAA,MACXS,SADW;AAAA,MACAC,YADA;;AAAA,mBAEgBV,QAAQ,CAAC,KAAD,CAFxB;AAAA,MAEXW,SAFW;AAAA,MAEAC,YAFA;;AAAA,mBAGUZ,QAAQ,CAAC,EAAD,CAHlB;AAAA,MAGXa,MAHW;AAAA,MAGHC,SAHG;;AAAA,uBAKGb,aAAa,CAAC,UAAAc,KAAK;AAAA,WAAIA,KAAJ;AAAA,GAAN,CALhB;AAAA,MAKVC,QALU,kBAKVA,QALU;;AAOlB,MAAMC,QAAQ,GAAGX,QAAQ,CAACG,SAAD,CAAzB;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACd,6DAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEiBM,cAAc,EAF/B;;AAAA;AAEOa,cAAAA,CAFP;AAGCA,cAAAA,CAAC,CAACC,EAAF,IAAQT,YAAY,CAACQ,CAAC,CAACE,IAAH,CAApB;;AAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,KADc,CAMd;;AACD,GAPQ,EAON,CAACJ,QAAD,CAPM,CAAT;AASA,sBACE;AAAA,eACGC,QAAQ,CAACI,GAAT,CAAa,UAACC,GAAD,EAAMC,CAAN;AAAA,0BACZ;AAAa,QAAA,SAAS,EAAErB,GAAG,CAAC,WAAD,CAAH,GAAmB,MAA3C;AAAA,kBACGoB,GAAG,CAACD,GAAJ,CAAQ,UAACG,SAAD,EAAYD,CAAZ;AAAA,8BACP,QAAC,SAAD;AAEE,YAAA,SAAS,EAAEC,SAFb;AAGE,YAAA,YAAY,EAAEZ,YAHhB;AAIE,YAAA,SAAS,EAAEE;AAJb,aACOS,CADP;AAAA;AAAA;AAAA;AAAA,mBADO;AAAA,SAAR;AADH,SAAUA,CAAV;AAAA;AAAA;AAAA;AAAA,eADY;AAAA,KAAb,CADH,EAaGZ,SAAS,iBACR,QAAC,eAAD;AAAiB,MAAA,OAAO,EAAEC,YAA1B;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,MAAM,EAAEC;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAdJ;AAAA,kBADF;AAqBD,CAvCD;;GAAML,K;UAKiBP,a;;;KALjBO,K;AAyCN,eAAeA,KAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useStoreState } from \"easy-peasy\";\n\nimport css from \"./Scans.module.css\";\n\nimport ScanThumb from \"../ScanThumb/ScanThumb.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground\";\n\nimport { getScannedMeta } from \"../../lib/helpers/processDb\";\nimport { chunkify } from \"../../lib/helpers/handleArr\";\nimport ScanData from \"../ScanData/ScanData\";\n\nconst Scans = () => {\n  const [metaArray, setMetaArray] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [dbName, setDbName] = useState(\"\");\n\n  const { metadata } = useStoreState(state => state);\n\n  const scanRows = chunkify(metaArray);\n\n  useEffect(() => {\n    (async () => {\n      // Get metadata for all locally stored website scans\n      const m = await getScannedMeta();\n      m.ok && setMetaArray(m.meta);\n    })();\n    // Re-fetch meta from local db after each new website scan\n  }, [metadata]);\n\n  return (\n    <>\n      {scanRows.map((row, i) => (\n        <div key={i} className={css[\"scans-row\"] + \" row\"}>\n          {row.map((thumbnail, i) => (\n            <ScanThumb\n              key={i}\n              thumbnail={thumbnail}\n              setShowModal={setShowModal}\n              setDbName={setDbName}\n            />\n          ))}\n        </div>\n      ))}\n      {showModal && (\n        <ModalBackground trigger={setShowModal}>\n          <ScanData dbName={dbName} />\n        </ModalBackground>\n      )}\n    </>\n  );\n};\n\nexport default Scans;\n"]},"metadata":{},"sourceType":"module"}