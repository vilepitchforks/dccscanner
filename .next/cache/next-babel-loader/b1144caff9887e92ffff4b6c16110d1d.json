{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanInit/NewScanInit.js\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport { authCreds } from \"../../lib/helpers/regex\";\nimport css from \"./NewScanInit.module.css\"; // const NewScanInit = ({ setNewScan }) => {\n\nconst NewScanInit = ({\n  url,\n  setUrl,\n  setNewScan\n}) => {\n  const {\n    scanUrl,\n    scanCtgs\n  } = useStoreState(state => state); // const { startStream } = useStoreActions(actions => actions);\n\n  const {\n    setScanUrl,\n    startStream\n  } = useStoreActions(actions => actions); // const handleInitScan = () => {\n  //   startStream(`url=${scanUrl}&categories=${scanCtgs}`);\n  //   // Removes the modal overlay\n  //   setNewScan(false);\n  // };\n\n  const handleInitScan = () => {\n    startStream(`url=${url}&categories=${scanCtgs}`); // Sets scanUrl in Redux store\n    // Check if creds are passed in the URL (https://username:password@www.website.com)\n\n    const hasCreds = authCreds.test(url); // Extract creds from the URL in format username:password@\n\n    const creds = hasCreds && url.match(authCreds)[0]; // If creds are passed, remove them from the URL\n\n    const inputURL = creds ? url.replace(creds, \"\") : url;\n    setScanUrl(inputURL); // Removes url value from local state\n\n    setUrl(\"\"); // Removes the modal overlay\n\n    setNewScan(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: css.start + \" u-full-width\",\n    onClick: () => handleInitScan(),\n    children: \"Start scan\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\nexport default NewScanInit;","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanInit/NewScanInit.js"],"names":["useStoreActions","useStoreState","authCreds","css","NewScanInit","url","setUrl","setNewScan","scanUrl","scanCtgs","state","setScanUrl","startStream","actions","handleInitScan","hasCreds","test","creds","match","inputURL","replace","start"],"mappings":";;AAAA,SAASA,eAAT,EAA0BC,aAA1B,QAA+C,YAA/C;AAEA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,OAAOC,GAAP,MAAgB,0BAAhB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,MAAP;AAAeC,EAAAA;AAAf,CAAD,KAAiC;AACnD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBR,aAAa,CAACS,KAAK,IAAIA,KAAV,CAA3C,CADmD,CAEnD;;AACA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA8BZ,eAAe,CAACa,OAAO,IAAIA,OAAZ,CAAnD,CAHmD,CAKnD;AACA;AACA;AACA;AACA;;AAEA,QAAMC,cAAc,GAAG,MAAM;AAC3BF,IAAAA,WAAW,CAAE,OAAMP,GAAI,eAAcI,QAAS,EAAnC,CAAX,CAD2B,CAG3B;AACA;;AACA,UAAMM,QAAQ,GAAGb,SAAS,CAACc,IAAV,CAAeX,GAAf,CAAjB,CAL2B,CAO3B;;AACA,UAAMY,KAAK,GAAGF,QAAQ,IAAIV,GAAG,CAACa,KAAJ,CAAUhB,SAAV,EAAqB,CAArB,CAA1B,CAR2B,CAU3B;;AACA,UAAMiB,QAAQ,GAAGF,KAAK,GAAGZ,GAAG,CAACe,OAAJ,CAAYH,KAAZ,EAAmB,EAAnB,CAAH,GAA4BZ,GAAlD;AACAM,IAAAA,UAAU,CAACQ,QAAD,CAAV,CAZ2B,CAc3B;;AACAb,IAAAA,MAAM,CAAC,EAAD,CAAN,CAf2B,CAiB3B;;AACAC,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAnBD;;AAqBA,sBACE;AACE,IAAA,SAAS,EAAEJ,GAAG,CAACkB,KAAJ,GAAY,eADzB;AAEE,IAAA,OAAO,EAAE,MAAMP,cAAc,EAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAxCD;;AA0CA,eAAeV,WAAf","sourcesContent":["import { useStoreActions, useStoreState } from \"easy-peasy\";\n\nimport { authCreds } from \"../../lib/helpers/regex\";\n\nimport css from \"./NewScanInit.module.css\";\n\n// const NewScanInit = ({ setNewScan }) => {\nconst NewScanInit = ({ url, setUrl, setNewScan }) => {\n  const { scanUrl, scanCtgs } = useStoreState(state => state);\n  // const { startStream } = useStoreActions(actions => actions);\n  const { setScanUrl, startStream } = useStoreActions(actions => actions);\n\n  // const handleInitScan = () => {\n  //   startStream(`url=${scanUrl}&categories=${scanCtgs}`);\n  //   // Removes the modal overlay\n  //   setNewScan(false);\n  // };\n\n  const handleInitScan = () => {\n    startStream(`url=${url}&categories=${scanCtgs}`);\n\n    // Sets scanUrl in Redux store\n    // Check if creds are passed in the URL (https://username:password@www.website.com)\n    const hasCreds = authCreds.test(url);\n\n    // Extract creds from the URL in format username:password@\n    const creds = hasCreds && url.match(authCreds)[0];\n\n    // If creds are passed, remove them from the URL\n    const inputURL = creds ? url.replace(creds, \"\") : url;\n    setScanUrl(inputURL);\n\n    // Removes url value from local state\n    setUrl(\"\");\n\n    // Removes the modal overlay\n    setNewScan(false);\n  };\n\n  return (\n    <button\n      className={css.start + \" u-full-width\"}\n      onClick={() => handleInitScan()}\n    >\n      Start scan\n    </button>\n  );\n};\n\nexport default NewScanInit;\n"]},"metadata":{},"sourceType":"module"}