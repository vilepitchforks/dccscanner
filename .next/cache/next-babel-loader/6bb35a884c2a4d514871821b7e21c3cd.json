{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/ScanLog/ScanLog.js\";\nimport { useEffect, useRef } from \"react\";\nimport { useStoreState } from \"easy-peasy\";\nimport css from \"./ScanLog.module.css\";\n\nconst ScanLog = () => {\n  const scanLogRref = useRef();\n  const {\n    scanUrl,\n    infoEvents,\n    errorEvents,\n    scanInProgress\n  } = useStoreState(state => state);\n  useEffect(() => {\n    const child = scanLogRref.current.lastElementChild;\n    child && child.scrollIntoViewIfNeeded && child.scrollIntoViewIfNeeded(true);\n  }, [infoEvents]);\n\n  const setScanStatusText = () => {\n    // if (!scanInProgress && scanUrl.length) return \"Scan starting...\";\n    if (scanInProgress) return \"Scan in progress...\";\n    if (!scanInProgress && scanUrl.length && infoEvents.length) return \"Scan completed.\";\n    return \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css.buildView,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${css.buildStreamFull} ${css.buildStream}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: scanLogRref,\n        className: css.buildStreamOutput,\n        children: infoEvents.map((event, i) => /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: css.buildStreamLine,\n          children: event\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: css.buildStreamFooter,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: css.gray,\n          children: [setScanStatusText(), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), errorEvents.length ? errorEvents.map((event, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: css.red,\n          children: event\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this)) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\nexport default ScanLog;","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/ScanLog/ScanLog.js"],"names":["useEffect","useRef","useStoreState","css","ScanLog","scanLogRref","scanUrl","infoEvents","errorEvents","scanInProgress","state","child","current","lastElementChild","scrollIntoViewIfNeeded","setScanStatusText","length","buildView","buildStreamFull","buildStream","buildStreamOutput","map","event","i","buildStreamLine","buildStreamFooter","gray","red"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,OAAOC,GAAP,MAAgB,sBAAhB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMC,WAAW,GAAGJ,MAAM,EAA1B;AAEA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA,WAAvB;AAAoCC,IAAAA;AAApC,MAAuDP,aAAa,CACxEQ,KAAK,IAAIA,KAD+D,CAA1E;AAIAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,KAAK,GAAGN,WAAW,CAACO,OAAZ,CAAoBC,gBAAlC;AAEAF,IAAAA,KAAK,IAAIA,KAAK,CAACG,sBAAf,IAAyCH,KAAK,CAACG,sBAAN,CAA6B,IAA7B,CAAzC;AACD,GAJQ,EAIN,CAACP,UAAD,CAJM,CAAT;;AAMA,QAAMQ,iBAAiB,GAAG,MAAM;AAC9B;AACA,QAAIN,cAAJ,EAAoB,OAAO,qBAAP;AACpB,QAAI,CAACA,cAAD,IAAmBH,OAAO,CAACU,MAA3B,IAAqCT,UAAU,CAACS,MAApD,EACE,OAAO,iBAAP;AACF,WAAO,EAAP;AACD,GAND;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAEb,GAAG,CAACc,SAApB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAG,GAAEd,GAAG,CAACe,eAAgB,IAAGf,GAAG,CAACgB,WAAY,EAA1D;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEd,WAAV;AAAuB,QAAA,SAAS,EAAEF,GAAG,CAACiB,iBAAtC;AAAA,kBACGb,UAAU,CAACc,GAAX,CAAe,CAACC,KAAD,EAAQC,CAAR,kBACd;AAAa,UAAA,SAAS,EAAEpB,GAAG,CAACqB,eAA5B;AAAA,oBACGF;AADH,WAAUC,CAAV;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAQ,QAAA,SAAS,EAAEpB,GAAG,CAACsB,iBAAvB;AAAA,gCAME;AAAM,UAAA,SAAS,EAAEtB,GAAG,CAACuB,IAArB;AAAA,qBAA4BX,iBAAiB,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,EAOGP,WAAW,CAACQ,MAAZ,GACGR,WAAW,CAACa,GAAZ,CAAgB,CAACC,KAAD,EAAQC,CAAR,kBACd;AAAc,UAAA,SAAS,EAAEpB,GAAG,CAACwB,GAA7B;AAAA,oBACGL;AADH,WAAWC,CAAX;AAAA;AAAA;AAAA;AAAA,gBADF,CADH,GAMG,EAbN;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CAjDD;;AAmDA,eAAenB,OAAf","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { useStoreState } from \"easy-peasy\";\n\nimport css from \"./ScanLog.module.css\";\n\nconst ScanLog = () => {\n  const scanLogRref = useRef();\n\n  const { scanUrl, infoEvents, errorEvents, scanInProgress } = useStoreState(\n    state => state\n  );\n\n  useEffect(() => {\n    const child = scanLogRref.current.lastElementChild;\n\n    child && child.scrollIntoViewIfNeeded && child.scrollIntoViewIfNeeded(true);\n  }, [infoEvents]);\n\n  const setScanStatusText = () => {\n    // if (!scanInProgress && scanUrl.length) return \"Scan starting...\";\n    if (scanInProgress) return \"Scan in progress...\";\n    if (!scanInProgress && scanUrl.length && infoEvents.length)\n      return \"Scan completed.\";\n    return \"\";\n  };\n\n  return (\n    <div className={css.buildView}>\n      <div className={`${css.buildStreamFull} ${css.buildStream}`}>\n        <div ref={scanLogRref} className={css.buildStreamOutput}>\n          {infoEvents.map((event, i) => (\n            <pre key={i} className={css.buildStreamLine}>\n              {event}\n            </pre>\n          ))}\n        </div>\n        <footer className={css.buildStreamFooter}>\n          {/* {!scanInProgress && infoEvents.length ? (\n            <span className={css.gray}>Scan completed. </span>\n          ) : (\n            \"\"\n          )} */}\n          <span className={css.gray}>{setScanStatusText()} </span>\n          {errorEvents.length\n            ? errorEvents.map((event, i) => (\n                <span key={i} className={css.red}>\n                  {event}\n                </span>\n              ))\n            : \"\"}\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default ScanLog;\n"]},"metadata":{},"sourceType":"module"}