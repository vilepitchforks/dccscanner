{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport xlsx from \"xlsx\";\nimport { formatTs } from \"../../lib/helpers/formatTimestamps.js\";\nimport { localeRgx } from \"../../lib/helpers/regex.js\";\nexport const handleDownloadXlsAll = async (db, scannedUrl) => {\n  const title = makeReportName(scannedUrl, \"xlsx\");\n\n  try {\n    // Fetch all data for one website from db\n    let websiteData = await db.col(\"dccdata\").findAsArray({\n      url: scannedUrl\n    }, {\n      _id: 0,\n      url: 0\n    });\n    websiteData = websiteData // Where category field is an array of objects, extract only the \"name\" value\n    .map(item => {\n      if (Array.isArray(item.categoryPath)) item.categoryPath = item.categoryPath.reduce((acc, curr) => {\n        if (curr.Name) return acc = curr.Name;\n      }, \"\");\n      return item;\n    });\n    const tsSet = new Set(websiteData.map(d => d.timestamp));\n    const timestamps = Array.from(tsSet).reverse(); // Group data by timestamp\n\n    const workbookData = timestamps.map(tStamp => websiteData.filter(row => row.timestamp === tStamp));\n    const workbook = xlsx.utils.book_new();\n    workbookData.forEach((sheet, i) => {\n      sheet.forEach(row => delete row.timestamp);\n      const wsName = formatTs(timestamps[i]);\n      const worksheet = xlsx.utils.json_to_sheet(sheet);\n      xlsx.utils.book_append_sheet(workbook, worksheet, wsName);\n    });\n    xlsx.writeFile(workbook, title);\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\nexport const handleDownloadXls = async (scannedUrl, reportData) => {\n  // Remove timestamps\n  reportData = reportData.map(row => {\n    const {\n      timestamp\n    } = row,\n          remainingKeys = _objectWithoutProperties(row, [\"timestamp\"]);\n\n    return remainingKeys;\n  });\n  const title = makeReportName(scannedUrl, \"xlsx\");\n\n  try {\n    const workbook = xlsx.utils.book_new();\n    const wsName = formatTs(new Date().getTime());\n    const worksheet = xlsx.utils.json_to_sheet(reportData);\n    xlsx.utils.book_append_sheet(workbook, worksheet, wsName);\n    xlsx.writeFile(workbook, title);\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\nexport const handleDownloadCsvBlob = (scannedUrl, reportData) => {\n  // Remove timestamps\n  reportData = reportData.map(row => {\n    const {\n      timestamp\n    } = row,\n          remainingKeys = _objectWithoutProperties(row, [\"timestamp\"]);\n\n    return remainingKeys;\n  });\n  const reportTitle = makeReportName(scannedUrl, \"csv\");\n\n  try {\n    const worksheet = xlsx.utils.json_to_sheet(reportData);\n    const csv = xlsx.utils.sheet_to_csv(worksheet);\n    window.URL = window.URL || window.webkiURL;\n    const blob = new Blob([csv]);\n    const blobURL = window.URL.createObjectURL(blob);\n    return {\n      reportTitle,\n      blobURL\n    };\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\nexport const handleDownloadJsonBlob = (scannedUrl, reportData) => {\n  // Remove timestamps\n  reportData = reportData.map(row => {\n    const {\n      timestamp\n    } = row,\n          remainingKeys = _objectWithoutProperties(row, [\"timestamp\"]);\n\n    return remainingKeys;\n  });\n  const reportTitle = makeReportName(scannedUrl, \"json\");\n\n  try {\n    window.URL = window.URL || window.webkiURL;\n    const blob = new Blob([JSON.stringify(reportData, null, 2)]);\n    const blobURL = window.URL.createObjectURL(blob);\n    return {\n      reportTitle,\n      blobURL\n    };\n  } catch (error) {\n    console.warn(\"An error occurred while creating the report!\", error);\n  }\n};\n\nconst makeReportName = (scannedUrl, extension) => {\n  let urlRN = scannedUrl.replace(/http(|s)\\:\\/\\//, \"\").split(localeRgx)[0];\n  if (urlRN.slice(-1) === \"/\") urlRN = urlRN.slice(0, urlRN.length - 1);\n  return `bvDCC_extract_${urlRN}_${new Date().getTime()}.${extension}`;\n};","map":null,"metadata":{},"sourceType":"module"}