{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Model } from \"../../helpers/processDb.js\";\nexport const setScanUrl = (state, scanUrl) => {\n  state.scanUrl = scanUrl;\n};\nexport const setScanCtgs = (state, scanCtgs) => {\n  state.scanCtgs = scanCtgs;\n};\nexport const setScanInProgress = (state, check) => {\n  state.scanInProgress = check;\n};\nexport const setMetadata = (state, meta) => {\n  state.metadata = meta;\n};\nexport const reSetScanUrl = state => {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = [];\n  state.errorEvents = [];\n};\nexport const addInfoEvent = (state, event) => {\n  state.infoEvents.push(event);\n};\nexport const addDataEvent = (state, {\n  url,\n  data,\n  timestamp\n}) => {\n  // Store valid DCC objects, with more than just url, scannedUrl and timestamp.\n  if (Object.keys(data).length > 3) state.dataEvents.push(_objectSpread({\n    url,\n    timestamp\n  }, data));\n};\nexport const addErrorEvent = (state, event) => {\n  state.errorEvents.push(event);\n};\nexport const startStream = async (actions, query) => {\n  const es = new EventSource(\"/api/stream?\" + query, {\n    withCredentials: true\n  });\n  const timestamp = new Date().getTime();\n\n  es.onopen = () => {\n    actions.addInfoEvent(\"Connection with server established.\");\n    actions.setScanInProgress(true);\n  };\n\n  es.addEventListener(\"info\", ({\n    data\n  }) => {\n    actions.addInfoEvent(JSON.parse(data));\n  });\n  es.addEventListener(\"data\", ({\n    lastEventId: url,\n    data\n  }) => {\n    actions.addDataEvent({\n      url,\n      data: JSON.parse(data),\n      timestamp\n    });\n  });\n  es.addEventListener(\"close\", e => {\n    actions.addInfoEvent(\"Connection with server closed.\");\n    actions.addInfoEvent(\"Processing scan data...\");\n    actions.setScanInProgress(false);\n    es.close();\n  });\n  es.addEventListener(\"servererror\", ({\n    lastEventId: url,\n    data\n  }) => {\n    console.log(\"Servererror event lastEventId\", url);\n    console.log(\"Servererror event data\", data);\n    actions.addErrorEvent(\"An error occurred: \" + data);\n    actions.setScanInProgress(false);\n    es.close();\n  });\n\n  es.onerror = err => {\n    console.warn(\"Actual error event\", err);\n    actions.addErrorEvent(\"An es.onerror occurred\");\n    actions.setScanInProgress(false);\n    es.close();\n  };\n};\nexport const setDb = (state, db) => {\n  state.db = db;\n};\nexport const initDb = async actions => {\n  const db = new Model();\n  actions.setDb(db);\n};","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/lib/state/eventHandlers/eventHandlers.js"],"names":["Model","setScanUrl","state","scanUrl","setScanCtgs","scanCtgs","setScanInProgress","check","scanInProgress","setMetadata","meta","metadata","reSetScanUrl","infoEvents","dataEvents","errorEvents","addInfoEvent","event","push","addDataEvent","url","data","timestamp","Object","keys","length","addErrorEvent","startStream","actions","query","es","EventSource","withCredentials","Date","getTime","onopen","addEventListener","JSON","parse","lastEventId","e","close","console","log","onerror","err","warn","setDb","db","initDb"],"mappings":"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","sourcesContent":["import { Model } from \"../../helpers/processDb.js\";\n\nexport const setScanUrl = (state, scanUrl) => {\n  state.scanUrl = scanUrl;\n};\n\nexport const setScanCtgs = (state, scanCtgs) => {\n  state.scanCtgs = scanCtgs;\n};\n\nexport const setScanInProgress = (state, check) => {\n  state.scanInProgress = check;\n};\n\nexport const setMetadata = (state, meta) => {\n  state.metadata = meta;\n};\n\nexport const reSetScanUrl = state => {\n  state.scanUrl = \"\";\n  state.scanCtgs = \"\";\n  state.metadata = {};\n  state.infoEvents = [];\n  state.dataEvents = [];\n  state.errorEvents = [];\n};\n\nexport const addInfoEvent = (state, event) => {\n  state.infoEvents.push(event);\n};\n\nexport const addDataEvent = (state, { url, data, timestamp }) => {\n  // Store valid DCC objects, with more than just url, scannedUrl and timestamp.\n  if (Object.keys(data).length > 3)\n    state.dataEvents.push({ url, timestamp, ...data });\n};\n\nexport const addErrorEvent = (state, event) => {\n  state.errorEvents.push(event);\n};\n\nexport const startStream = async (actions, query) => {\n  const es = new EventSource(\"/api/stream?\" + query, {\n    withCredentials: true\n  });\n\n  const timestamp = new Date().getTime();\n\n  es.onopen = () => {\n    actions.addInfoEvent(\"Connection with server established.\");\n    actions.setScanInProgress(true);\n  };\n  es.addEventListener(\"info\", ({ data }) => {\n    actions.addInfoEvent(JSON.parse(data));\n  });\n  es.addEventListener(\"data\", ({ lastEventId: url, data }) => {\n    actions.addDataEvent({ url, data: JSON.parse(data), timestamp });\n  });\n  es.addEventListener(\"close\", e => {\n    actions.addInfoEvent(\"Connection with server closed.\");\n    actions.addInfoEvent(\"Processing scan data...\");\n    actions.setScanInProgress(false);\n    es.close();\n  });\n  es.addEventListener(\"servererror\", ({ lastEventId: url, data }) => {\n    console.log(\"Servererror event lastEventId\", url);\n    console.log(\"Servererror event data\", data);\n    actions.addErrorEvent(\"An error occurred: \" + data);\n    actions.setScanInProgress(false);\n    es.close();\n  });\n  es.onerror = err => {\n    console.warn(\"Actual error event\", err);\n    actions.addErrorEvent(\"An es.onerror occurred\");\n    actions.setScanInProgress(false);\n    es.close();\n  };\n};\n\nexport const setDb = (state, db) => {\n  state.db = db;\n};\n\nexport const initDb = async actions => {\n  const db = new Model();\n  actions.setDb(db);\n};\n"]},"metadata":{},"sourceType":"module"}