{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanModal/NewScanModal.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\nimport css from \"./NewScanModal.module.css\";\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\nimport { withoutCreds } from \"../../lib/helpers/withoutCreds.js\";\n\nvar NewScanModal = function NewScanModal(_ref) {\n  _s();\n\n  var isNew = _ref.isNew,\n      setIsNew = _ref.setIsNew,\n      setNewScan = _ref.setNewScan;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      url = _useState2[0],\n      setUrl = _useState2[1];\n\n  var _useState3 = useState([]),\n      slugs = _useState3[0],\n      setSlugs = _useState3[1];\n\n  var _useStoreState = useStoreState(function (state) {\n    return state;\n  }),\n      scanCtgs = _useStoreState.scanCtgs,\n      db = _useStoreState.db;\n\n  var actions = useStoreActions(function (actions) {\n    return actions;\n  });\n\n  var getMetaFromDb = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var meta;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true); // Check if metadata exists in local db. typeof meta<{res}:Object || undefined>\n\n              _context.next = 3;\n              return db.collection(\"metadata\").findOne({\n                scannedUrl: url\n              });\n\n            case 3:\n              meta = _context.sent;\n\n              if (!meta) {\n                _context.next = 10;\n                break;\n              }\n\n              actions.addInfoEvent(\"Metadata for \".concat(url, \" successfully fetched.\"));\n              setLoading(false);\n              return _context.abrupt(\"return\", {\n                ok: true,\n                meta: meta\n              });\n\n            case 10:\n              setLoading(false);\n              return _context.abrupt(\"return\", {\n                ok: false,\n                meta: {}\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getMetaFromDb() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getMetaFromWebsite = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var meta, isMetaAvailable, isMetaStored, fetchedMeta;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoading(true);\n              meta = {}, isMetaAvailable = false, isMetaStored = false; // If website does not exist in local db, fetch metadata\n\n              _context2.next = 4;\n              return slugDriver({\n                query: \"url=\" + url\n              });\n\n            case 4:\n              fetchedMeta = _context2.sent;\n              if (fetchedMeta && fetchedMeta.metadata) isMetaAvailable = true; // Website details are fetched and metadata exists\n\n              if (isMetaAvailable) {\n                meta = _objectSpread({\n                  scannedUrl: withoutCreds(url),\n                  slugs: fetchedMeta.slugs\n                }, fetchedMeta.metadata);\n              }\n\n              if (!isMetaAvailable) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.next = 10;\n              return db.collection(\"metadata\").insert(meta, function () {\n                actions.addInfoEvent(\"Metadata for \".concat(withoutCreds(url), \" successfully stored.\"));\n                isMetaStored = true;\n              });\n\n            case 10:\n              if (!isMetaStored) {\n                _context2.next = 15;\n                break;\n              }\n\n              setLoading(false);\n              return _context2.abrupt(\"return\", {\n                ok: true,\n                meta: meta\n              });\n\n            case 15:\n              setLoading(false);\n              return _context2.abrupt(\"return\", {\n                ok: false,\n                meta: meta\n              });\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getMetaFromWebsite() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var getMeta = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getMetaFromDb();\n\n            case 2:\n              data = _context3.sent;\n\n              if (!data.ok) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", data.meta);\n\n            case 5:\n              _context3.next = 7;\n              return getMetaFromWebsite();\n\n            case 7:\n              data = _context3.sent;\n\n              if (!data.ok) {\n                _context3.next = 10;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", data.meta);\n\n            case 10:\n              return _context3.abrupt(\"return\", false);\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getMeta() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleSlugs = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var meta;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (urlRgx.test(url)) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 2:\n              // setIsNew(false) Removes the default \"New DCC scan\" text\n              setIsNew(false);\n              _context4.next = 5;\n              return getMeta();\n\n            case 5:\n              meta = _context4.sent;\n\n              if (!meta) {\n                _context4.next = 11;\n                break;\n              }\n\n              actions.setMetadata(meta); // setSlugs(meta.slugs);\n              // return actions.setScanUrl(url);\n\n              return _context4.abrupt(\"return\", setSlugs(meta.slugs));\n\n            case 11:\n              // If fetching metadata fails, reset the default \"New DCC scan\" details and remove url from state\n              setIsNew(true);\n              setUrl(\"\");\n\n            case 13:\n              return _context4.abrupt(\"return\");\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleSlugs() {\n      return _ref5.apply(this, arguments);\n    };\n  }(); // Cleanup function, resets all url data each time Modal component unmounts\n\n\n  useEffect(function () {\n    return function () {\n      return setIsNew(true);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ModalBackground, {\n    trigger: setNewScan,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.modal,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"three columns\",\n          children: /*#__PURE__*/_jsxDEV(NewScanForm, {\n            loading: loading,\n            url: url,\n            setUrl: setUrl,\n            slugs: slugs,\n            handleSlugs: handleSlugs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(WebCard, {\n          loading: loading,\n          isNew: isNew\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: scanCtgs && /*#__PURE__*/_jsxDEV(NewScanInit, {\n          url: url,\n          setUrl: setUrl,\n          setNewScan: setNewScan\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(NewScanModal, \"nVJo6Frow5UGXVSc9PAirh5eZ0o=\", false, function () {\n  return [useStoreState, useStoreActions];\n});\n\n_c = NewScanModal;\nexport default NewScanModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewScanModal\");","map":{"version":3,"sources":["/home/angelovski/Documents/Projects/dccscanner/web/src/components/NewScanModal/NewScanModal.js"],"names":["useEffect","useState","useStoreActions","useStoreState","NewScanForm","WebCard","NewScanInit","ModalBackground","css","slugDriver","urlRgx","withoutCreds","NewScanModal","isNew","setIsNew","setNewScan","loading","setLoading","url","setUrl","slugs","setSlugs","state","scanCtgs","db","actions","getMetaFromDb","collection","findOne","scannedUrl","meta","addInfoEvent","ok","getMetaFromWebsite","isMetaAvailable","isMetaStored","query","fetchedMeta","metadata","insert","getMeta","data","handleSlugs","test","setMetadata","modal"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\n\nimport NewScanForm from \"../NewScanForm/NewScanForm.js\";\nimport WebCard from \"../WebCard/WebCard.js\";\nimport NewScanInit from \"../NewScanInit/NewScanInit.js\";\nimport ModalBackground from \"../ModalBackground/ModalBackground.js\";\n\nimport css from \"./NewScanModal.module.css\";\n\nimport { slugDriver } from \"../../lib/drivers/restDrivers\";\nimport { urlRgx } from \"../../lib/helpers/regex\";\nimport { withoutCreds } from \"../../lib/helpers/withoutCreds.js\";\n\nconst NewScanModal = ({ isNew, setIsNew, setNewScan }) => {\n  const [loading, setLoading] = useState(false);\n  const [url, setUrl] = useState(\"\");\n  const [slugs, setSlugs] = useState([]);\n\n  const { scanCtgs, db } = useStoreState(state => state);\n  const actions = useStoreActions(actions => actions);\n\n  const getMetaFromDb = async () => {\n    setLoading(true);\n    // Check if metadata exists in local db. typeof meta<{res}:Object || undefined>\n    const meta = await db.collection(\"metadata\").findOne({ scannedUrl: url });\n\n    if (meta) {\n      actions.addInfoEvent(`Metadata for ${url} successfully fetched.`);\n      setLoading(false);\n      return {\n        ok: true,\n        meta\n      };\n    } else {\n      setLoading(false);\n      return {\n        ok: false,\n        meta: {}\n      };\n    }\n  };\n\n  const getMetaFromWebsite = async () => {\n    setLoading(true);\n    let meta = {},\n      isMetaAvailable = false,\n      isMetaStored = false;\n\n    // If website does not exist in local db, fetch metadata\n    const fetchedMeta = await slugDriver({ query: \"url=\" + url });\n\n    if (fetchedMeta && fetchedMeta.metadata) isMetaAvailable = true;\n\n    // Website details are fetched and metadata exists\n    if (isMetaAvailable) {\n      meta = {\n        scannedUrl: withoutCreds(url),\n        slugs: fetchedMeta.slugs,\n        ...fetchedMeta.metadata\n      };\n    }\n\n    if (isMetaAvailable) {\n      // Store website metadata and slugs to local db\n      await db.collection(\"metadata\").insert(meta, () => {\n        actions.addInfoEvent(\n          `Metadata for ${withoutCreds(url)} successfully stored.`\n        );\n        isMetaStored = true;\n      });\n    }\n\n    if (isMetaStored) {\n      setLoading(false);\n      return {\n        ok: true,\n        meta\n      };\n    } else {\n      setLoading(false);\n      return {\n        ok: false,\n        meta\n      };\n    }\n  };\n\n  const getMeta = async () => {\n    let data = await getMetaFromDb();\n    if (data.ok) return data.meta;\n\n    data = await getMetaFromWebsite();\n    if (data.ok) return data.meta;\n\n    return false;\n  };\n\n  const handleSlugs = async () => {\n    if (!urlRgx.test(url)) return;\n\n    // setIsNew(false) Removes the default \"New DCC scan\" text\n    setIsNew(false);\n\n    const meta = await getMeta();\n\n    if (meta) {\n      actions.setMetadata(meta);\n      // setSlugs(meta.slugs);\n      // return actions.setScanUrl(url);\n      return setSlugs(meta.slugs);\n      // return actions.setScanUrl(url);\n    } else {\n      // If fetching metadata fails, reset the default \"New DCC scan\" details and remove url from state\n      setIsNew(true);\n      setUrl(\"\");\n    }\n    return;\n  };\n\n  // Cleanup function, resets all url data each time Modal component unmounts\n  useEffect(() => () => setIsNew(true), []);\n\n  return (\n    <ModalBackground trigger={setNewScan}>\n      <div className={css.modal}>\n        <div className=\"row flex\">\n          <div className=\"three columns\">\n            <NewScanForm\n              loading={loading}\n              url={url}\n              setUrl={setUrl}\n              slugs={slugs}\n              handleSlugs={handleSlugs}\n            />\n          </div>\n          <WebCard loading={loading} isNew={isNew} />\n        </div>\n        <div className=\"row\">\n          {/* Do not display START SCAN button until URL and categories are prepared */}\n          {/* {scanCtgs && <NewScanInit setNewScan={setNewScan} />} */}\n          {scanCtgs && (\n            <NewScanInit url={url} setUrl={setUrl} setNewScan={setNewScan} />\n          )}\n        </div>\n      </div>\n    </ModalBackground>\n  );\n};\n\nexport default NewScanModal;\n"]},"metadata":{},"sourceType":"module"}